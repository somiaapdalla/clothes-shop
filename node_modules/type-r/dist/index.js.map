{"version":3,"file":"index.js","sources":["../node_modules/tslib/tslib.es6.js","../src/object-plus/tools.ts","../src/object-plus/mixins.ts","../src/object-plus/eventsource.ts","../src/object-plus/events.ts","../src/object-plus/index.ts","../src/validation.ts","../src/traversable.ts","../src/io-tools.ts","../src/transactions.ts","../src/record/attributes/updates.ts","../src/record/attributes/any.ts","../src/record/attributes/owned.ts","../src/record/attributes/attrDef.ts","../src/record/attributes/date.ts","../src/record/attributes/basic.ts","../src/record/attributes/shared.ts","../src/record/attributes/index.ts","../src/record/io-mixin.ts","../src/record/record.ts","../src/record/index.ts","../src/collection/commons.ts","../src/collection/add.ts","../src/collection/set.ts","../src/collection/remove.ts","../src/collection/index.ts","../src/relations/commons.ts","../src/relations/from.ts","../src/relations/subsetOf.ts","../src/relations/store.ts","../src/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Simple overridable logging stubs, writing to `console` by default.\n * Node.js users might want to redirect logging somewhere.\n * \n * This is the singleton avaliable globally through `Object.log` or \n * exported [[log]] variable.\n */\n\n /** Similar to underscore `_.defaults` */\nexport function defaults< T >( dest : T, ...sources : Object[] ) : T\nexport function defaults< T >( dest : T, source : Object ) : T {\n    for( var name in source ) {\n        if( source.hasOwnProperty( name ) && !dest.hasOwnProperty( name ) ) {\n            dest[ name ] = source[ name ];\n        }\n    }\n\n    if( arguments.length > 2 ){\n        for( let i = 2; i < arguments.length; i++ ){\n            const other = arguments[ i ];\n            other && defaults( dest, other );\n        }\n    }\n\n    return dest;\n}\n\n// Logger is the function.\nexport type Logger = ( level : LogLevel, error : string, props? : object ) => void;\n\nexport type LogLevel = 'none' | 'error' | 'warn' | 'info' | 'debug' | 'log';\n\nconst levelToNumber = {\n    none : 0, error : 1, warn : 2, info : 3, log : 4, debug : 5\n}\n\nexport interface Log extends Logger {\n    level : number\n    throw : number\n    stop : number\n    logger : Logger\n}\n\nexport const log : Log = <any>function( a_level : LogLevel, a_msg : string, a_props : object ){\n    let levelAsNumber = levelToNumber[ a_level ], msg, props, level;\n\n    if( levelAsNumber === void 0 && !a_props ){\n        levelAsNumber = 4;\n        msg = a_level;\n        props = a_msg;\n        level = 'log';\n    }\n    else{\n        msg = a_msg, level = a_level, props = a_props;\n    }\n\n    if( levelAsNumber <= log.level ){\n        if( levelAsNumber <= log.throw || !log.logger ){\n            const error = new Error( msg );\n            (error as any).props = props;\n            throw error;\n        }\n        else{\n            log.logger( level, msg, props );\n            \n            if( levelAsNumber <= log.stop ){\n                debugger;\n            }\n        }\n    }\n}\n\ndeclare var process: any;\n\nlog.level = typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'production' ? 1 : 2;\nlog.throw = 0;\nlog.stop = 0;\n\n\nlet toString = typeof window === 'undefined' ? \n    function toString( something ){\n        if( something && typeof something === 'object' ){\n            const value = something.__inner_state__ || something,\n                isTransactional = Boolean( something.__inner_state__ ),\n                isArray = Array.isArray( value );\n\n            const keys = Object.keys( value ).join( ', ' ),\n                  body = isArray ? `[ length = ${ value.length } ]` : `{ ${ keys } }`;\n\n            return something.constructor.name + ' ' + body;\n        }\n\n        return something;\n    } : function toString( x ){ return x; };\n\nif( typeof console !== 'undefined' ) {\n    log.logger = function _console( level : LogLevel, error : string, props : object ){\n        const args = [ error ];\n        for( let name in props ){\n            args.push( `\\n\\t${name}:`, toString( props[ name ] ) );\n        }\n\n        console[ level ].apply( console, args );\n    }\n}\n\n/** Check if value is raw JSON */\nexport function isValidJSON( value : any ) : boolean {\n    if( value === null ){\n        return true;\n    }\n\n    switch( typeof value ){\n    case 'number' :\n    case 'string' :\n    case 'boolean' :\n        return true;\n\n    case 'object':\n        var proto = Object.getPrototypeOf( value );\n\n        if( proto === Object.prototype || proto === Array.prototype ){\n            return every( value, isValidJSON );\n        }\n    }\n\n    return false;\n}\n\n/** Get the base class constructor function.\n * @param Class Subclass constructor function.\n * @returns Base class constructor function.\n */\nexport function getBaseClass( Class : Function ) {\n    return Object.getPrototypeOf( Class.prototype ).constructor\n}\n\nexport function assignToClassProto<T, K extends keyof T>( Class, definition : T, ...names : K[] ) : void {\n    for( let name of names ){\n        const value = definition[ name ];\n        value === void 0 || ( Class.prototype[ name ] = value );\n    }\n}\n\n/** Checks whenever given object is an empty hash `{}` */\nexport function isEmpty( obj : {} ) : boolean {\n    if( obj ){\n        for( let key in obj ){\n            if( obj.hasOwnProperty( key ) ){\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nexport type Iteratee = ( value : any, key? : string | number ) => any;\n\n/** @hidden */\nfunction someArray( arr : any[], fun : Iteratee ) : any {\n    let result;\n\n    for( let i = 0; i < arr.length; i++ ){\n        if( result = fun( arr[ i ], i ) ){\n            return result;\n        }\n    }\n}\n\n/** @hidden */\nfunction someObject( obj : {}, fun : Iteratee ) : any {\n    let result;\n\n    for( let key in obj ){\n        if( obj.hasOwnProperty( key ) ){\n            if( result = fun( obj[ key ], key ) ){\n                return result;\n            }\n        }\n    }\n}\n\n/** Similar to underscore `_.some` */\nexport function some( obj, fun : Iteratee ) : any {\n    if( Object.getPrototypeOf( obj ) === ArrayProto ){\n        return someArray( obj, fun );\n    }\n    else{\n        return someObject( obj, fun );\n    }\n}\n\n/** Similar to underscore `_.every` */\nexport function every( obj : { }, predicate : Iteratee ) : boolean {\n    return !some( obj, x => !predicate( x ) );\n}\n\n/** Similar to `getOwnPropertyDescriptor`, but traverse the whole prototype chain. */\nexport function getPropertyDescriptor( obj : {}, prop : string ) : PropertyDescriptor {\n    let desc : PropertyDescriptor;\n\n    for( let proto = obj; !desc && proto; proto = Object.getPrototypeOf( proto ) ) {\n        desc = Object.getOwnPropertyDescriptor( proto, prop );\n    }\n\n    return desc;\n}\n\n/** Similar to underscore `_.omit` */\nexport function omit( source : {}, ...rest : string[] ) : {}\nexport function omit( source ) : {} {\n    const dest = {}, discard = {};\n\n    for( let i = 1; i < arguments.length; i ++ ){\n        discard[ arguments[ i ] ] = true;\n    }\n\n    for( var name in source ) {\n        if( !discard.hasOwnProperty( name ) && source.hasOwnProperty( name ) ) {\n            dest[ name ] = source[ name ];\n        }\n    }\n\n    return dest;\n}\n\n/** map `source` object properties with a given function, and assign the result to the `dest` object.\n * When `fun` returns `undefined`, skip this value. \n */\nexport function transform< A, B >( dest : { [ key : string ] : A }, source : { [ key : string ] : B }, fun : ( value : B, key : string ) => A | void ) : { [ key : string ] : A } {\n    for( var name in source ) {\n        if( source.hasOwnProperty( name ) ) {\n            var value = fun( source[ name ], name );\n            value === void 0 || ( dest[ name ] = < A >value );\n        }\n    }\n\n    return dest;\n}\n\n/** @hidden */\nexport function fastAssign< A >( dest : A, source : {} ) : A {\n    for( var name in source ) {\n        dest[ name ] = source[ name ];\n    }\n\n    return dest;\n}\n\n/** @hidden */\nexport function fastDefaults< A >( dest : A, source : {} ) : A {\n    for( var name in source ) {\n        if( dest[ name ] === void 0 ){\n            dest[ name ] = source[ name ];\n        }\n    }\n\n    return dest;\n}\n\n/** Similar to underscore `_.extend` and `Object.assign` */\nexport function assign< T >( dest : T, ...sources : Object[] ) : T\nexport function assign< T >( dest : T, source : Object ) : T {\n    for( var name in source ) {\n        if( source.hasOwnProperty( name ) ) {\n            dest[ name ] = source[ name ];\n        }\n    }\n\n    if( arguments.length > 2 ){\n        for( let i = 2; i < arguments.length; i++ ){\n            const other = arguments[ i ];\n            other && assign( dest, other );\n        }\n    }\n\n    return dest;\n}\n\n/** Similar to underscore `_.keys` */\nexport function keys( o : any ) : string[]{\n    return o ? Object.keys( o ) : [];\n}\n\n/** Similar to underscore `_.once` */\nexport function once( func : Function ) : Function {\n    var memo, first = true;\n    return function() {\n        if ( first ) {\n            first = false;\n            memo = func.apply(this, arguments);\n            func = null;\n        }\n        return memo;\n    };\n}\n\n/** @hidden */\nconst ArrayProto = Array.prototype,\n      DateProto = Date.prototype,\n      ObjectProto = Object.prototype;\n\n/**\n * Determine whenever two values are not equal, deeply traversing \n * arrays and plain JS objects (hashes). Dates are compared by enclosed timestamps, all other\n * values are compared with strict comparison.\n */\nexport function notEqual( a : any, b : any) : boolean {\n    if( a === b ) return false;\n\n    if( a && b && typeof a == 'object' && typeof b == 'object' ) {\n        const protoA = Object.getPrototypeOf( a );\n\n        if( protoA !== Object.getPrototypeOf( b ) ) return true;\n\n        switch( protoA ){\n            case DateProto   : return +a !== +b;\n            case ArrayProto  : return arraysNotEqual( a, b );\n            case ObjectProto :\n            case null:\n                return objectsNotEqual( a, b );\n        }\n    }\n\n    return true;\n}\n\n/** @hidden */\nfunction objectsNotEqual( a, b ) {\n    const keysA = Object.keys( a );\n\n    if( keysA.length !== Object.keys( b ).length ) return true;\n\n    for( let i = 0; i < keysA.length; i++ ) {\n        const key = keysA[ i ];\n\n        if( !b.hasOwnProperty( key ) || notEqual( a[ key ], b[ key ] ) ) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/** @hidden */\nfunction arraysNotEqual( a, b ) {\n    if( a.length !== b.length ) return true;\n\n    for( let i = 0; i < a.length; i++ ) {\n        if( notEqual( a[ i ], b[ i ] ) ) return true;\n    }\n\n    return false;\n}\n\n/**\n * Create an object without Object prototype members except hasOwnProperty.\n * @param obj - optional parameter to populate the hash map from.\n */\nconst HashProto = Object.create( null );\nHashProto.hasOwnProperty = ObjectProto.hasOwnProperty;\n\nexport function hashMap( obj? ){\n    const hash = Object.create( HashProto );\n    return obj ? assign( hash, obj ) : hash;\n}","/*****************************************************************\n * Mixins engine and @define metaprogramming class extensions\n *\n * Vlad Balin & Volicon, (c) 2016-2017\n */\nimport { log, assign, omit, hashMap, getPropertyDescriptor, getBaseClass, defaults, transform } from './tools'\nimport { __extends } from 'tslib'\n\nexport interface Subclass< T > extends MixableConstructor {\n    new ( ...args ) : T\n    prototype : T\n}\n\nexport interface MixableConstructor extends Function{\n    __super__? : object;\n    mixins? : MixinsState;\n    onExtend? : ( BaseClass : Function ) => void;\n    onDefine? : ( definition : object, BaseClass : Function ) => void;\n    define? : ( definition? : object, statics? : object ) => MixableConstructor;\n    extend? : <T extends object>( definition? : T, statics? : object ) => Subclass<T>;\n}\n\nexport interface MixableDefinition {\n    mixins? : Mixin[]\n}\n\n/**\n * Base class, holding metaprogramming class extensions.\n * Supports mixins and Class.define metaprogramming method.\n */\nexport class Mixable {\n    static onExtend : ( BaseClass : Function ) => void;\n    static onDefine : ( definition : object, BaseClass : Function ) => object;    \n    static __super__ : object\n    static mixins : MixinsState;\n\n    /** \n     *  Must be called after inheritance and before 'define'.\n     */\n    static define( protoProps : MixableDefinition = {}, staticProps? : object ) : MixableConstructor {\n        const BaseClass : MixableConstructor = getBaseClass( this );\n\n        // Assign statics.\n        staticProps && assign( this, staticProps );\n\n        // Extract and apply mixins from the definition.\n        const { mixins, ...defineMixin } = protoProps;\n        mixins && this.mixins.merge( mixins );\n\n        // Unshift definition to the the prototype.\n        this.mixins.mergeObject( this.prototype, defineMixin, true );\n\n        // Unshift definition from statics to the prototype.\n        this.mixins.mergeObject( this.prototype, this.mixins.getStaticDefinitions( BaseClass ), true );\n\n        // Call onDefine hook, if it's present.\n        this.onDefine && this.onDefine( this.mixins.definitions, BaseClass );\n        \n        // Apply merge rules to inherited members. No mixins can be added after this point.\n        this.mixins.mergeInheritedMembers( BaseClass );\n\n        return this;\n    }\n\n    /** Backbone-compatible extend method to be used in ES5 and for backward compatibility */\n    static extend< T extends object>(spec? : T, statics? : {} ) : Subclass< T > {\n        let TheSubclass : Subclass< T >;\n\n        // 1. Create the subclass (ES5 compatibility shim).\n        // If constructor function is given...\n        if( spec && spec.hasOwnProperty( 'constructor' ) ){\n            // ...we need to manually call internal TypeScript __extend function. Hack! Hack!\n            TheSubclass = spec.constructor as any;\n            __extends( TheSubclass, this );\n        }\n        // Otherwise, create the subclall in usual way.\n        else{\n            TheSubclass = class Subclass extends this {} as any;\n        }\n\n        predefine( TheSubclass );\n        spec && TheSubclass.define( spec, statics );\n\n        return TheSubclass;\n    }\n}\n\n/** @decorator `@predefine` for forward definitions. Can be used with [[Mixable]] classes only.\n * Forwards the call to the [[Mixable.predefine]];\n */\nexport function predefine( Constructor : MixableConstructor ) : void {\n    const BaseClass : MixableConstructor = getBaseClass( Constructor );\n\n    // Legacy systems support\n    Constructor.__super__ = BaseClass.prototype;\n    \n    // Initialize mixins structures...\n    Constructor.define || MixinsState.get( Mixable ).populate( Constructor );\n\n    // Make sure Ctor.mixins are ready before the callback...\n    MixinsState.get( Constructor );\n\n    // Call extend hook.\n    Constructor.onExtend && Constructor.onExtend( BaseClass );\n}\n\n/** @decorator `@define` for metaprogramming magic. Can be used with [[Mixable]] classes only.\n *  Forwards the call to [[Mixable.define]].\n */\nexport function define( ClassOrDefinition : Function ) : void;\nexport function define( ClassOrDefinition : object ) : ClassDecorator;\nexport function define( ClassOrDefinition : object | MixableConstructor ){\n    // @define class\n    if( typeof ClassOrDefinition === 'function' ){\n        predefine( ClassOrDefinition );\n        ClassOrDefinition.define();\n    }\n    // @define({ prop : val, ... }) class\n    else{\n        return function( Ctor : MixableConstructor ){\n            predefine( Ctor );\n            Ctor.define( ClassOrDefinition );\n        }\n    }\n}\n\nexport function definitions( rules : MixinMergeRules ) : ClassDecorator {\n    return ( Class : Function ) => {\n        const mixins = MixinsState.get( Class );\n        mixins.definitionRules = defaults( hashMap(), rules, mixins.definitionRules );\n    }\n}\n\n// Create simple property list decorator\nexport function propertyListDecorator( listName: string ) : PropertyDecorator {\n    return function propList(proto, name : string) {\n        const list = proto.hasOwnProperty( listName ) ?\n            proto[ listName ] : (proto[ listName ] = (proto[ listName ] || []).slice());  \n\n        list.push(name);\n    }\n}\n\nexport function definitionDecorator( definitionKey, value ){\n    return ( proto : object, name : string ) => {\n        MixinsState\n            .get( proto.constructor )\n            .mergeObject( proto, {\n                [ definitionKey ] : {\n                    [ name ] : value\n                }\n            });\n    }\n}\n\nexport class MixinsState {\n    mergeRules : MixinMergeRules;\n    definitionRules : MixinMergeRules;\n    definitions : object = {};\n    appliedMixins : Mixin[];\n\n    // Return mixins state for the class. Initialize if it's not exist.\n    static get( Class ) : MixinsState {\n        const { mixins } = Class;\n    \n        return mixins && Class === mixins.Class ? mixins :\n             Class.mixins = new MixinsState( Class );\n    }\n\n    constructor( public Class : MixableConstructor ){\n        const { mixins } = getBaseClass( Class );\n\n        this.mergeRules = ( mixins && mixins.mergeRules ) || hashMap();\n        this.definitionRules = ( mixins && mixins.definitionRules ) || hashMap();\n        this.appliedMixins = ( mixins && mixins.appliedMixins ) || [];\n    }\n\n    getStaticDefinitions( BaseClass : Function ){\n        const definitions = hashMap(),\n            { Class } = this;\n\n        return transform( definitions, this.definitionRules, ( rule, name ) =>{\n            if( BaseClass[ name ] !== Class[ name ]){\n                return Class[ name ];\n            }\n        });\n    }\n\n    merge( mixins : Mixin[] ){\n        const proto      = this.Class.prototype,\n            { mergeRules } = this;\n\n        // Copy applied mixins array as it's going to be updated.\n        const appliedMixins = this.appliedMixins = this.appliedMixins.slice();\n\n        // Apply mixins in sequence...\n        for( let mixin of mixins ) {\n            // Mixins array should be flattened.\n            if( Array.isArray( mixin ) ) {\n                this.merge( mixin );\n            }\n            // Don't apply mixins twice.\n            else if( appliedMixins.indexOf( mixin ) < 0 ){\n                appliedMixins.push( mixin );\n\n                // For constructors, merge _both_ static and prototype members.\n                if( typeof mixin === 'function' ){\n                    // Merge static members\n                    this.mergeObject( this.Class, mixin );\n\n                    // merge definitionRules and mergeRules\n                    const sourceMixins = ( mixin as any ).mixins;\n                    if( sourceMixins ){\n                        this.mergeRules = defaults( hashMap(), this.mergeRules, sourceMixins.mergeRules );\n                        this.definitionRules = defaults( hashMap(), this.definitionRules, sourceMixins.definitionRules );\n                        this.appliedMixins = this.appliedMixins.concat( sourceMixins.appliedMixins );\n                    }\n\n                    // Prototypes are merged according with rules.\n                    this.mergeObject( proto, mixin.prototype );\n                }\n                // Handle plain object mixins.\n                else {\n                    this.mergeObject( proto, mixin );\n                }\n            }\n        }\n    }\n\n    populate( ...ctors : Function[] ){\n        for( let Ctor of ctors ) {\n            MixinsState.get( Ctor ).merge([ this.Class ]);\n        }\n    }\n\n    mergeObject( dest : object, source : object, unshift? : boolean ) {\n        forEachOwnProp( source, name => {\n            const sourceProp = Object.getOwnPropertyDescriptor( source, name );\n            let rule : MixinMergeRule;\n\n            if( rule = this.definitionRules[ name ] ){\n                assignProperty( this.definitions, name, sourceProp, rule, unshift );\n            }\n\n            if( !rule || rule === mixinRules.protoValue  ){\n                assignProperty( dest, name, sourceProp, this.mergeRules[ name ], unshift );\n            }\n        });\n    }\n\n    mergeInheritedMembers( BaseClass : Function ){\n        const { mergeRules, Class } = this;\n\n        if( mergeRules ){\n            const proto = Class.prototype,\n                baseProto = BaseClass.prototype;\n\n            for( let name in mergeRules ) {\n                const rule = mergeRules[ name ];\n\n                if( proto.hasOwnProperty( name ) && name in baseProto ){\n                    proto[ name ] = resolveRule( proto[ name ], baseProto[ name ], rule );\n                }\n            }\n        }\n    }\n}\n\nconst dontMix = {\n    function : hashMap({\n        length : true,\n        prototype : true,\n        caller : true,\n        arguments : true,\n        name : true,\n        __super__ : true\n    }),\n    \n    object : hashMap({\n        constructor : true\n    })    \n}\n\nfunction forEachOwnProp( object : object, fun : ( name : string ) => void ){\n    const ignore = dontMix[ typeof object ];\n\n    for( let name of Object.keys( object ) ) {\n        ignore[ name ] || fun( name );\n    }\n}\n\nexport interface MixinMergeRules {\n    [ name : string ] : MixinMergeRule\n}\n\nexport type MixinMergeRule = ( a : any, b : any ) => any\nexport type Mixin = { [ key : string ] : any } | Function\n\n// @mixins( A, B, ... ) decorator.\nexport interface MixinRulesDecorator {\n    ( rules : MixinMergeRules ) : ClassDecorator\n    value( a : object, b : object) : object;\n    protoValue( a : object, b : object) : object;\n    merge( a : object, b : object ) : object;\n    pipe( a: Function, b : Function ) : Function;\n    defaults( a: Function, b : Function ) : Function;\n    classFirst( a: Function, b : Function ) : Function;\n    classLast( a: Function, b : Function ) : Function;\n    every( a: Function, b : Function ) : Function;\n    some( a: Function, b : Function ) : Function;\n}\n\nexport const mixins = ( ...list : Mixin[] ) => (\n    ( Class : Function ) => MixinsState.get( Class ).merge( list )\n);\n\n// @mixinRules({ name : rule, ... }) decorator.\nexport const mixinRules = ( ( rules : MixinMergeRules ) => (\n    ( Class : Function ) => {\n        const mixins = MixinsState.get( Class );\n        mixins.mergeRules = defaults( rules, mixins.mergeRules );\n    }\n) ) as MixinRulesDecorator;\n\n// Pre-defined mixin merge rules\n\nmixinRules.value = ( a, b ) => a;\n\nmixinRules.protoValue = ( a, b ) => a;\n\n// Recursively merge members\nmixinRules.merge = ( a, b ) => defaults( {}, a, b );\n\n    // Execute methods in pipe, with the class method executed last.\nmixinRules.pipe = ( a, b ) => (\n    function( x : any ) : any {\n        return a.call( this, b.call( this, x ) );\n    }\n);\n\n    // Assume methods return an object, and merge results with defaults (class method executed first)\nmixinRules.defaults = ( a : Function, b : Function ) => (\n    function() : object {\n        return defaults( a.apply( this, arguments ), b.apply( this, arguments ) );\n    }\n);\n\n// Execute methods in sequence staring with the class method.\nmixinRules.classFirst = ( a : Function, b : Function ) => (\n    function() : void {\n        a.apply( this, arguments );\n        b.apply( this, arguments );\n    }\n);\n\n    // Execute methods in sequence ending with the class method.\nmixinRules.classLast = ( a : Function, b : Function ) => (\n    function() : void {\n        b.apply( this, arguments );\n        a.apply( this, arguments );\n    }\n)\n\n    // Execute methods in sequence returning the first falsy result.\nmixinRules.every = ( a : Function, b : Function ) =>(\n    function() : any {\n        return a.apply( this, arguments ) && b.apply( this, arguments );\n    }\n);\n    // Execute methods in sequence returning the first truthy result.\nmixinRules.some = ( a : Function, b : Function ) =>(\n    function() : any {\n        return a.apply( this, arguments ) || b.apply( this, arguments );\n    }\n);\n\n/**\n * Helpers\n */\n\nfunction assignProperty( dest : object, name : string, sourceProp : PropertyDescriptor, rule : MixinMergeRule, unshift? : boolean ){\n// Destination prop is defined, thus the merge rules must be applied.\n    if( dest.hasOwnProperty( name ) ){\n        const destProp = Object.getOwnPropertyDescriptor( dest, name );\n\n        if( destProp.configurable && 'value' in destProp ){\n            dest[ name ] = unshift ?\n                resolveRule( sourceProp.value, destProp.value, rule ) :\n                resolveRule( destProp.value, sourceProp.value, rule ) ;\n        }\n    }\n    // If destination is empty, just copy the prop over.\n    else{\n        Object.defineProperty( dest, name, sourceProp );\n    }\n}\n\nfunction resolveRule( dest, source, rule : MixinMergeRule ){\n    // When destination is empty, take the source.\n    if( dest === void 0 ) return source;\n\n    // In these cases we take non-empty destination:\n    if( !rule || source === void 0 ) return dest;\n\n    // In other cases we must merge values.\n    return rule( dest, source );\n}","import { once as _once } from './tools'\n\n/*******************\n * Prebuilt events map, used for optimized bulk event subscriptions.\n *\n * const events = new EventMap({\n *      'change' : true, // Resend this event from self as it is.\n *      'change:attr' : 'localTargetFunction',\n *      'executedInTargetContext' : function(){ ... }\n *      'executedInNativeContext' : '^props.handler'\n * })\n */\n/** @hidden */\nexport interface EventsDefinition {\n    [ events : string ] : Function | string | boolean\n}\n\n/** @hidden */\nexport class EventMap {\n    handlers : EventDescriptor[] = [];\n\n    constructor( map? : EventsDefinition | EventMap ){\n        if( map ){\n            if( map instanceof EventMap ){\n                this.handlers = map.handlers.slice();\n            }\n            else{\n                map && this.addEventsMap( map );\n            }\n        }\n    }\n\n    merge( map : EventMap ){\n        this.handlers = this.handlers.concat( map.handlers );\n    }\n\n    addEventsMap( map : EventsDefinition ){\n        for( let names in map ){\n            this.addEvent( names, map[ names ] )\n        }\n    }\n\n    bubbleEvents( names : string ){\n        for( let name of names.split( eventSplitter ) ){\n            this.addEvent( name, getBubblingHandler( name ) );\n        }\n    }\n\n    addEvent( names : string, callback : Function | string | boolean ){\n        const { handlers } = this;\n\n        for( let name of names.split( eventSplitter ) ){\n            handlers.push( new EventDescriptor( name, callback ) );\n        }\n    }\n\n    subscribe( target : {}, source : EventSource ){\n        for( let event of this.handlers ){\n            on( source, event.name, event.callback, target );\n        }\n    }\n\n    unsubscribe( target : {}, source : EventSource ){\n        for( let event of this.handlers ){\n            off( source, event.name, event.callback, target );\n        }\n    }\n}\n\n/** @hidden */\nexport class EventDescriptor {\n    callback : Function\n\n    constructor(\n        public name : string,\n        callback : Function | string | boolean\n    ){\n        if( callback === true ){\n            this.callback = getBubblingHandler( name );\n        }\n        else if( typeof callback === 'string' ){\n            this.callback =\n                function localCallback(){\n                    const handler = this[ callback ];\n                    handler && handler.apply( this, arguments );\n                };\n        }\n        else{\n            this.callback = <Function>callback;\n        }\n    }\n}\n\n/** @hidden */\nconst _bubblingHandlers = {};\n\n/** @hidden */\nfunction getBubblingHandler( event : string ){\n    return _bubblingHandlers[ event ] || (\n        _bubblingHandlers[ event ] = function( a?, b?, c?, d?, e? ){\n            if( d !== void 0 || e !== void 0 ) trigger5( this, event, a, b, c, d, e );\n            if( c !== void 0 ) trigger3( this, event, a, b, c );\n            else trigger2( this, event, a, b );\n        }\n    );\n}\n\n/** @hidden */\nexport interface HandlersByEvent {\n    [ name : string ] : EventHandler\n}\n\n/** @hidden */\nexport class EventHandler {\n    constructor( public callback : Callback, public context : any, public next = null ){}\n}\n\n/** @hidden */\nfunction listOff( _events : HandlersByEvent, name : string, callback : Callback, context : any ){\n    const head = _events[ name ];\n\n    let filteredHead, prev;\n\n    for( let ev = head; ev; ev = ev.next ){\n        // Element must be kept\n        if( ( callback && callback !== ev.callback && callback !== ev.callback._callback ) ||\n            ( context && context !== ev.context ) ){\n            \n            prev = ev;\n            filteredHead || ( filteredHead = ev );\n        }\n        // Element must be skipped\n        else{\n            if( prev ) prev.next = ev.next;\n        }\n    }\n\n    if( head !== filteredHead ) _events[ name ] = filteredHead;\n}\n\n/** @hidden */\nfunction listSend2( head : EventHandler, a, b ){\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b );\n}\n\n/** @hidden */\nfunction listSend3( head : EventHandler, a, b, c ){\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c );\n}\n\n/** @hidden */\nfunction listSend4( head : EventHandler, a, b, c, d ){\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c, d );\n}\n\n/** @hidden */\nfunction listSend5( head : EventHandler, a, b, c, d, e ){\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c, d, e );\n}\n\n/** @hidden */\nfunction listSend6( head : EventHandler, a, b, c, d, e, f ){\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c, d, e, f );\n}\n\n/** @hidden */\nexport interface Callback extends Function {\n    _callback? : Function\n}\n\n/** @hidden */\nexport function on( source : EventSource, name : string, callback : Callback, context? : any ) : void {\n    if( callback ){\n        const _events = source._events || ( source._events = Object.create( null ) );\n        _events[ name ] = new EventHandler( callback, context, _events[ name ] );\n    }\n}\n\n/** @hidden */\nexport function once( source : EventSource, name : string, callback : Callback, context? : any ) : void {\n    if( callback ){\n        const once : Callback = _once( function(){\n            off( source, name, once );\n            callback.apply(this, arguments);\n        });\n\n        once._callback = callback;\n        on( source, name, once, context );\n    }\n}\n\n/** @hidden */\nexport function off( source : EventSource, name? : string, callback? : Callback, context? : any ) : void {\n    const { _events } = source;\n    if( _events ){\n        if( callback || context ) {\n            if( name ){\n                listOff( _events, name, callback, context );\n            }\n            else{\n                for( let name in _events ){\n                    listOff( _events, name, callback, context );\n                }\n            }\n        }\n        else if( name ){\n            _events[ name ] = void 0;\n        }\n        else{\n            source._events = void 0;\n        }\n    }\n}\n\n/** @hidden */\nexport interface EventSource {\n    _events : HandlersByEvent\n}\n\n/** @hidden */\nconst eventSplitter = /\\s+/;\n\n/** @hidden */\nexport function strings( api : ApiEntry, source : EventSource, events : string, callback : Callback, context ){\n    if( eventSplitter.test( events ) ){\n        const names = events.split( eventSplitter );\n        for( let name of names ) api( source, name, callback, context );\n    }\n    else api( source, events, callback, context );\n}\n\n/** @hidden */\nexport type ApiEntry = ( source : EventSource, event : string, callback : Callback, context? : any ) => void\n\n/*********************************\n * Event-triggering API\n */\n\n/** @hidden */\nexport function trigger2( self : EventSource, name : string, a, b ) : void {\n    const { _events } = self;\n    if( _events ){\n        const queue = _events[ name ],\n            { all } = _events;\n\n        listSend2( queue, a, b );\n        listSend3( all, name, a, b );\n    }\n};\n\n/** @hidden */\nexport function trigger3( self : EventSource, name : string, a, b, c ) : void{\n    const { _events } = self;\n    if( _events ){\n        const queue = _events[ name ],\n            { all } = _events;\n\n        listSend3( queue, a, b, c );\n        listSend4( all, name, a, b, c );\n    }\n};\n\n/** @hidden */\nexport function trigger5( self : EventSource, name : string, a, b, c, d, e ) : void{\n    const { _events } = self;\n    if( _events ){\n        const queue = _events[ name ],\n            { all } = _events;\n\n        listSend5( queue, a, b, c, d, e );\n        listSend6( all, name, a, b, c, d, e );\n    }\n};","import { define, mixins, Mixable, Mixin, MixableConstructor, MixinsState, mixinRules, definitions, MixinMergeRules } from './mixins'\nimport { omit, transform } from './tools'\nimport { EventMap, EventsDefinition, EventSource, HandlersByEvent } from './eventsource'\nimport * as _eventsApi from './eventsource'\n\nconst { EventHandler, strings, on, off, once, trigger5, trigger2, trigger3 } = _eventsApi;\n\n/** @hidden */\nconst eventSplitter = /\\s+/;\n\n/** @hidden */\nlet _idCount = 0;\n\n/** @hidden */\nfunction uniqueId() : string {\n    return 'l' + _idCount++;\n}\n\nexport { EventMap, EventsDefinition }\n\nexport interface MessengerDefinition {\n    _localEvents? : EventMap\n    localEvents? : EventsDefinition\n    properties? : PropertyMap\n    [ name : string ] : any\n}\n\nexport interface PropertyMap {\n    [ name : string ] : Property\n}\n\nexport type Property = PropertyDescriptor | ( () => any )\n\n/** @hidden */\nexport interface MessengersByCid {\n    [ cid : string ] : Messenger\n}\n\n/** @hidden */\nexport type CallbacksByEvents = { [ events : string ] : Function }\n\n/*************************\n * Messenger is mixable class with capabilities of sending and receiving synchronous events.\n * This class itself can serve as both mixin and base class.\n */\n\n@define\n@definitions({\n    properties : mixinRules.merge,\n    localEvents : mixinRules.merge\n})\nexport abstract class Messenger implements Mixable, EventSource {\n    // Define extendable mixin static properties.\n    static __super__ : object;\n    static mixins : MixinsState;\n    static onExtend : ( BaseClass : Function ) => void;\n    static define : ( definition? : MessengerDefinition, statics? : object ) => MixableConstructor;\n    static extend : ( definition? : MessengerDefinition, statics? : object ) => MixableConstructor;\n    static onDefine({ localEvents, _localEvents, properties } : MessengerDefinition, BaseClass? : typeof Mixable ){\n        // Handle localEvents definition\n        if( localEvents || _localEvents ){\n            const eventsMap = new EventMap( this.prototype._localEvents );\n\n            localEvents && eventsMap.addEventsMap( localEvents );\n            _localEvents && eventsMap.merge( _localEvents );\n            \n            this.prototype._localEvents = eventsMap;\n        }\n\n        // Handle properties definitions...\n        if( properties ){\n            Object.defineProperties( this.prototype, transform( {}, <PropertyMap>properties, toPropertyDescriptor ) );\n        }\n    }\n\n    /** @hidden */ \n    _events : HandlersByEvent = void 0;\n\n    /** @hidden */ \n    _listeningTo : MessengersByCid = void 0\n\n    /** Unique client-only id. */\n    cid : string\n\n    /** @hidden Prototype-only property to manage automatic local events subscription */ \n    _localEvents : EventMap\n\n    /** @hidden */ \n    constructor(){\n        this.cid = uniqueId();\n        this.initialize.apply( this, arguments );\n\n        // TODO: local events subscribe?\n    }\n\n    /** Method is called at the end of the constructor */\n    initialize() : void {}\n    \n    on( events : string | CallbacksByEvents, callback, context? ) : this {\n        if( typeof events === 'string' ) strings( on, this, events, callback, context );\n        else for( let name in events ) strings( on, this, name, events[ name ], context || callback );\n\n        return this;\n    }\n\n    once( events : string | CallbacksByEvents, callback, context? ) : this {\n        if( typeof events === 'string' ) strings( once, this, events, callback, context );\n        else for( let name in events ) strings( once, this, name, events[ name ], context || callback );\n\n        return this;\n    }\n\n    off( events? : string | CallbacksByEvents, callback?, context? ) : this {\n        if( !events ) off( this, void 0, callback, context );\n        else if( typeof events === 'string' ) strings( off, this, events, callback, context );\n        else for( let name in events ) strings( off, this, name, events[ name ], context || callback );\n\n        return this;\n    }\n\n    // Trigger one or many events, firing all bound callbacks. Callbacks are\n    // passed the same arguments as `trigger` is, apart from the event name\n    // (unless you're listening on `\"all\"`, which will cause your callback to\n    // receive the true name of the event as the first argument).\n    trigger(name : string, a?, b?, c?, d?, e? ) : this {\n        if( d !== void 0 || e !== void 0 ) trigger5( this, name, a, b, c, d, e );\n        else if( c !== void 0 ) trigger3( this, name, a, b, c );\n        else trigger2( this, name, a, b );\n        return this;\n    }\n\n    listenTo( source : Messenger, a : string | CallbacksByEvents, b? : Function ) : this {\n        if( source ){\n            addReference( this, source );\n            source.on( a, !b && typeof a === 'object' ? this : b, this );\n        }\n\n        return this;\n    }\n\n    listenToOnce( source : Messenger, a : string | CallbacksByEvents, b? : Function ) : this {\n        if( source ){\n            addReference( this, source );\n            source.once( a, !b && typeof a === 'object' ? this : b, this );\n        }\n\n        return this;\n    }\n\n    stopListening( a_source? : Messenger, a? : string | CallbacksByEvents, b? : Function ) : this {\n        const { _listeningTo } = this;\n        if( _listeningTo ){\n            const removeAll = !( a || b ),\n                  second = !b && typeof a === 'object' ? this : b;\n\n            if( a_source ){\n                const source = _listeningTo[ a_source.cid ];\n                if( source ){\n                    if( removeAll ) delete _listeningTo[ a_source.cid ];\n                    source.off( a, second, this );\n                }\n            }\n            else if( a_source == null ){\n                for( let cid in _listeningTo ) _listeningTo[ cid ].off( a, second, this );\n\n                if( removeAll ) ( this._listeningTo = void 0 );\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Destructor. Stops messenger from listening to all objects,\n     * and stop others from listening to the messenger. \n     */\n    _disposed : boolean\n\n    dispose() : void {\n        if( this._disposed ) return;\n\n        this.stopListening();\n        this.off();\n\n        this._disposed = true;\n    }\n}\n\n/**\n * Backbone 1.2 API conformant Events mixin.\n */\nexport const Events : Messenger = <Messenger> omit( Messenger.prototype, 'constructor', 'initialize' );\n\n/**\n * Messenger Private Helpers \n */\n\nfunction toPropertyDescriptor( x : Property ) : PropertyDescriptor {\n    if( x ){\n        return typeof x === 'function' ? { get : < () => any >x } : <PropertyDescriptor> x;\n    }\n}\n\n/** @hidden */\nfunction addReference( listener : Messenger, source : Messenger ){\n      const listeningTo = listener._listeningTo || (listener._listeningTo = Object.create( null ) ),\n            cid = source.cid || ( source.cid = uniqueId() );\n\n      listeningTo[ cid ] = source;\n}","// (c) 2016 Vlad Balin and Volicon\n// MixtureJS may be freely distributed under the MIT license. \n\nimport * as tools from './tools'\nexport { tools }\nexport * from './mixins'\nexport * from './events'\nimport * as eventsApi from './eventsource'\nexport { eventsApi }\n\nimport { Mixable, MixableConstructor } from './mixins'\n\ndeclare global {\n    interface ObjectConstructor {\n        /** Polyfill for Object.assign */\n        assign< T >( dest : T, ...sources : Object[] ) : T\n\n        /** Global logging interface, for console debugging. */\n        log : tools.Log\n\n        /** ES5 Object.extend */\n        extend( protoProps : {}, staticProps : {} ) : MixableConstructor\n    }\n}\n\nObject.extend = ( protoProps, staticProps ) => Mixable.extend( protoProps, staticProps );\nObject.assign || ( Object.assign = tools.assign );\nObject.log = tools.log;","export interface ChildrenErrors {\n    [ key : string ] : ValidationError | any\n} \n\nexport interface Validatable {\n    _validateNested( errors : ChildrenErrors ) : number;\n    validate( self : any ) : any\n    get( key : string ) : any\n}\n\n// Validation error object.\nexport class ValidationError {\n    // Invalid nested object keys \n    nested : ChildrenErrors \n    length : number\n\n    // Local error\n    error : any\n\n    constructor( obj : Validatable ){\n        this.length = obj._validateNested( this.nested = {} );\n\n        if( this.error = obj.validate( obj ) ){\n            this.length++;\n        }\n    }\n\n    each( iteratee : ( value : any, key : string ) => void ) : void {\n        const { error, nested } = this;\n\n        if( error ) iteratee( error, null );\n\n        for( const key in nested ){\n            iteratee( nested[ key ], key );\n        }\n    }\n\n    eachError( iteratee : ( error : any, key : string, object : Validatable ) => void, object : Validatable ) : void {\n        this.each( ( value : any, key : string ) => {\n            if( value instanceof ValidationError ){\n                (<ValidationError>value).eachError( iteratee, object.get( key ) );\n            }\n            else{\n                iteratee( value, key, object );\n            }\n        });\n    }\n}","/**\n * Some sketches for reference resolution.\n *\n * \n * a : Model.from( '~collection' )\n * \n * We need two functions. One for get, and one for compile. \n */\nexport interface Traversable {\n    getStore() : Traversable\n    getOwner() : Traversable\n    get( key : string ) : any \n}\n\nconst referenceMask =  /\\^|(store\\.[^.]+)|([^.]+)/g;\n\n// Compile reference to function\nexport type ResolveReference = ( root : Traversable ) => any;  \n\nexport class CompiledReference {\n    resolve : ResolveReference\n    tail : string\n    local : boolean\n\n    constructor( reference : string, splitTail : boolean = false ){\n        const path = reference\n                        .match( referenceMask )\n                        .map( key => {\n                            if( key === '^' || key === 'owner' ) return 'getOwner()';\n\n                            if( key[ 0 ] === '~' ) return `getStore().get(\"${ key.substr( 1 ) }\")`;\n\n                            if( key.indexOf( 'store.' ) === 0 ) return `getStore().get(\"${ key.substr( 6 ) }\")`;\n                            \n                            return key;\n                        } );\n               \n        this.tail = splitTail && path.pop();\n        this.local = !path.length;\n        \n        this.resolve = <any> new Function( 'self', `\n            var v = self.${ path.shift() };\n                           \n            ${ path.map( x => `\n                v = v && v.${ x };\n            `).join('')}\n\n            return v;\n        ` );\n    }\n}\n\nexport function resolveReference( root : Traversable, reference : string, action : ( object, key : string ) => any ) : any {\n    const path = reference.match( referenceMask ),\n          skip = path.length - 1;\n    \n    let self = root;\n\n    for( var i = 0; i < skip; i++ ){\n        const key = path[ i ];\n        switch( key ){\n            case '~' : self = self.getStore(); break;\n            case '^' : self = self.getOwner(); break;\n            default  : self = self.get( key );\n        }\n\n        // Do nothing if object on the path doesn't exist.\n        if( !self ) return;\n    }\n\n    return action( self, path[ skip ] );\n}","export interface IONode {\n    _endpoint : IOEndpoint\n    _ioPromise : IOPromise< this >\n}\n\nexport interface IOPromise<T> extends Promise<T> {\n    abort? : () => void\n}\n\nexport interface IOEndpoint {\n    list( options : IOOptions, collection? ) : IOPromise<any>\n    create( json : any, options : IOOptions, record? ) : IOPromise<any>\n    update( id : string | number, json :any, options : IOOptions, record? ) : IOPromise<any>\n    read( id : string | number, options : IOOptions, record? ) : IOPromise<any>\n    destroy( id : string | number, options : IOOptions, record? ) : IOPromise<any>\n    subscribe( events : IOEvents, collection? ) : IOPromise<any>\n    unsubscribe( events : IOEvents, collection? ) : void\n}\n\nexport interface IOOptions {\n    ioUpdate? : boolean\n}\n\nexport interface IOEvents {\n    updated? : ( json : any ) => void\n    removed? : ( json : any ) => void\n}\n\nexport function getOwnerEndpoint( self ) : IOEndpoint {\n    // Check if we are the member of the collection...\n    const { collection } = self;\n    if( collection ){\n        return getOwnerEndpoint( collection );\n    }\n\n    // Now, if we're the member of the model...\n    if( self._owner ){\n        const { _endpoints } = self._owner;\n        return _endpoints && _endpoints[ self._ownerKey ];\n    }\n}\n\n/**\n * Create abortable promise.\n * Adds `promise.abort()` function which rejects the promise by default\n * initialize() function takes third optional argument `abort : ( resolve, reject ) => void`,\n * which can be used to add custom abort handling.\n */\ndeclare var Promise: PromiseConstructorLike;\n\nexport function createIOPromise( initialize : InitIOPromise ) : IOPromise<any>{\n    let resolve, reject, onAbort;\n\n    function abort( fn ){\n        onAbort = fn;\n    }\n\n    const promise : IOPromise<any> = new Promise( ( a_resolve, a_reject ) =>{\n        reject = a_reject;\n        resolve = a_resolve;\n        initialize( resolve, reject, abort );\n    }) as IOPromise<any>;\n\n    promise.abort = () => {\n        onAbort ? onAbort( resolve, reject ) : reject( new Error( \"I/O Aborted\" ) );\n    }\n\n    return promise;\n}\n\nexport type InitIOPromise = ( resolve : ( x? : any ) => void, reject : ( x? : any ) => void, abort? : ( fn : Function ) => void ) => void;\n\nexport function startIO( self : IONode, promise : IOPromise<any>, options : IOOptions, thenDo : ( json : any ) => any ) : IOPromise<any> {\n    // Stop pending I/O first...\n    abortIO( self );\n\n    // Mark future update transaction as IO transaction.\n    options.ioUpdate = true;\n\n    self._ioPromise = promise\n        .then( resp => {\n            self._ioPromise = null;\n    \n            const result = thenDo ? thenDo( resp ) : resp;\n                \n            triggerAndBubble( self, 'sync', self, resp, options );\n                \n            return result;\n        } )  \n        .catch( err => {\n            self._ioPromise = null;\n\n            console.error( err );\n            \n            triggerAndBubble( self, 'error', self, err, options );\n            \n            throw err;\n        } ) as IOPromise<any>;\n\n    self._ioPromise.abort = promise.abort;\n\n    return self._ioPromise;\n}\n\nexport function abortIO( self : IONode ){\n    if( self._ioPromise && self._ioPromise.abort ){\n        self._ioPromise.abort();\n        self._ioPromise = null;\n    }\n}\n\nexport function triggerAndBubble( eventSource, ...args ){\n    eventSource.trigger.apply( eventSource, args );\n    const { collection } = eventSource;\n    collection && collection.trigger.apply( collection, args ); \n}","import { Messenger, CallbacksByEvents, MessengersByCid, MixinsState, MixinMergeRules, MessengerDefinition, tools, mixins, mixinRules, definitions, eventsApi, define, Subclass } from './object-plus'\nimport { ValidationError, Validatable, ChildrenErrors } from './validation'\nimport { Traversable, resolveReference } from './traversable'\nimport { IOEndpoint, IOPromise, IONode, abortIO } from './io-tools'\n\nconst { assign } = tools,\n      { trigger2, trigger3, on, off } = eventsApi;\n/***\n * Abstract class implementing ownership tree, tho-phase transactions, and validation. \n * 1. createTransaction() - apply changes to an object tree, and if there are some events to send, transaction object is created.\n * 2. transaction.commit() - send and process all change events, and close transaction.\n */\n\n/** @private */\nexport interface TransactionalDefinition extends MessengerDefinition {\n    endpoint? : IOEndpoint\n}\n\nexport enum ItemsBehavior {\n    share       = 0b0001,\n    listen      = 0b0010,\n    persistent  = 0b0100\n}\n\n// Transactional object interface\n@define\n@definitions({\n    endpoint : mixinRules.value\n})\n@mixins( Messenger )\nexport abstract class Transactional implements Messenger, IONode, Validatable, Traversable {\n    // Mixins are hard in TypeScript. We need to copy type signatures over...\n    // Here goes 'Mixable' mixin.\n    static endpoint : IOEndpoint;\n    static __super__ : object;\n    static mixins : MixinsState;\n    static define : ( definition? : TransactionalDefinition, statics? : object ) => typeof Transactional;\n    static extend : <T extends TransactionalDefinition>( definition? : T, statics? : object ) => any;\n\n    static onDefine( definitions : TransactionalDefinition, BaseClass : typeof Transactional ){\n        if( definitions.endpoint ) this.prototype._endpoint = definitions.endpoint;\n        Messenger.onDefine.call( this, definitions, BaseClass );\n    };\n\n    static onExtend( BaseClass : typeof Transactional ) : void {\n        // Make sure we don't inherit class factories.\n        if( BaseClass.create === this.create ) {\n            this.create = Transactional.create;\n        }\n    }\n\n    // Define extendable mixin static properties.\n    static create( a : any, b? : any ) : Transactional {\n        return new (this as any)( a, b );\n    }\n\n    /** Generic class factory. May be overridden for abstract classes. Not inherited. */\n    on : ( events : string | CallbacksByEvents, callback, context? ) => this\n    once : ( events : string | CallbacksByEvents, callback, context? ) => this\n    off : ( events? : string | CallbacksByEvents, callback?, context? ) => this\n    trigger      : (name : string, a?, b?, c?, d?, e? ) => this\n\n    stopListening : ( source? : Messenger, a? : string | CallbacksByEvents, b? : Function ) => this\n    listenTo : ( source : Messenger, a : string | CallbacksByEvents, b? : Function ) => this\n    listenToOnce : ( source : Messenger, a : string | CallbacksByEvents, b? : Function ) => this\n    \n    _disposed : boolean;\n\n    // State accessor. \n    readonly __inner_state__ : any;\n\n    // Shared modifier (used by collections of shared models)\n    _shared? : number; \n    \n    dispose() : void {\n        if( this._disposed ) return;\n        \n        abortIO( this );\n        this._owner = void 0;\n        this._ownerKey = void 0;\n        this.off();\n        this.stopListening();\n        this._disposed = true;\n    }\n\n    // Must be called at the end of the constructor in the subclass.\n    initialize() : void {}\n\n    /** @private */\n    _events : eventsApi.HandlersByEvent = void 0;\n\n    /** @private */\n    _listeningTo : MessengersByCid\n\n    /** @private */\n    _localEvents : eventsApi.EventMap\n\n    cid : string\n    cidPrefix : string\n\n    static shared : any;\n\n    // Unique version token replaced on change\n    /** @private */\n    _changeToken : {} = {}\n\n    // true while inside of the transaction\n    /** @private */\n    _transaction : boolean = false;\n\n    // Holds current transaction's options, when in the middle of transaction and there're changes but is an unsent change event\n    /** @private */\n    _isDirty  : TransactionOptions = null;\n\n    // Backreference set by owner (Record, Collection, or other object)\n    /** @private */\n    _owner : Owner = void 0;\n\n    // Key supplied by owner. Used by record to identify attribute key.\n    // Only collections doesn't set the key, which is used to distinguish collections.\n    /** @private */  \n    _ownerKey : string = void 0;\n\n    // Name of the change event\n    /** @private */\n    _changeEventName : string\n\n    /**\n     * Subsribe for the changes.\n     */\n    onChanges( handler : Function, target? : Messenger ){\n        on( this, this._changeEventName, handler, target );\n    }\n\n    /**\n     * Unsubscribe from changes.\n     */\n    offChanges( handler? : Function, target? : Messenger ){\n        off( this, this._changeEventName, handler, target );\n    }\n\n    /**\n     * Listen to changes event. \n     */\n    listenToChanges( target : Transactional, handler ){\n        this.listenTo( target, target._changeEventName, handler );\n    }\n\n    constructor( cid : string | number ){\n        this.cid = this.cidPrefix + cid;\n    }\n\n    // Deeply clone ownership subtree\n    abstract clone( options? : CloneOptions ) : this\n    \n    // Execute given function in the scope of ad-hoc transaction.\n    transaction( fun : ( self : this ) => void, options : TransactionOptions = {} ) : void{\n        const isRoot = transactionApi.begin( this );\n        const update = fun.call( this, this );\n        update && this.set( update );\n        isRoot && transactionApi.commit( this );\n    }\n\n    // Loop through the members in the scope of transaction.\n    // Transactional version of each()\n    updateEach( iteratee : ( val : any, key : string | number ) => void, options? : TransactionOptions ){\n        const isRoot = transactionApi.begin( this );\n        this.each( iteratee );\n        isRoot && transactionApi.commit( this );\n    }\n\n    // Apply bulk in-place object update in scope of ad-hoc transaction \n    set( values : any, options? : TransactionOptions ) : this {\n        if( values ){ \n            const transaction = this._createTransaction( values, options );\n            transaction && transaction.commit();\n        } \n\n        return this;\n    }\n\n    // Assign transactional object \"by value\", copying aggregated items.\n    assignFrom( source : Transactional | Object ) : this {\n        // Need to delay change events until change token willl by synced.\n        this.transaction( () =>{\n            this.set( ( <any>source ).__inner_state__ || source, { merge : true } );\n\n            // Synchronize change tokens\n            const { _changeToken } = source as any;\n    \n            if( _changeToken ){\n                this._changeToken = _changeToken;\n            }    \n        });\n\n        return this;\n    }\n\n    // Apply bulk object update without any notifications, and return open transaction.\n    // Used internally to implement two-phase commit.\n    // Returns null if there are no any changes.\n    /** @private */  \n    abstract _createTransaction( values : any, options? : TransactionOptions ) : Transaction | void\n    \n    // Parse function applied when 'parse' option is set for transaction.\n    parse( data : any, options? : TransactionOptions ) : any { return data }\n\n    // Convert object to the serializable JSON structure\n    abstract toJSON( options? : object ) : {}\n\n    /*******************\n     * Traversals and member access\n     */\n    \n    // Get object member by its key.\n    abstract get( key : string ) : any\n\n    // Get object member by symbolic reference.\n    deepGet( reference : string ) : any {\n        return resolveReference( this, reference, ( object, key ) => object.get ? object.get( key ) : object[ key ] );\n    }\n\n    //_isCollection : boolean\n\n    // Return owner skipping collections.\n    getOwner() : Owner {\n        return this._owner;\n    }\n\n    // Store used when owner chain store lookup failed. Static value in the prototype. \n    /** @private */\n    _defaultStore : Transactional\n\n    // Locate the closest store. Store object stops traversal by overriding this method. \n    getStore() : Transactional {\n        const { _owner } = this;\n        return _owner ? <Transactional> _owner.getStore() : this._defaultStore;\n    }\n\n\n    /***************************************************\n     * Iteration API\n     */\n\n    // Loop through the members. Must be efficiently implemented in container class.\n    abstract each( iteratee : ( val : any, key : string | number ) => void, context? : any )\n\n    // Map members to an array\n    map<T>( iteratee : ( val : any, key : string | number ) => T, context? : any ) : T[]{\n        const arr : T[] = [],\n              fun = context !== void 0 ? ( v, k ) => iteratee.call( context, v, k ) : iteratee;\n        \n        this.each( ( val, key ) => {\n            const result = fun( val, key );\n            if( result !== void 0 ) arr.push( result );\n        } );\n\n        return arr;\n    }\n\n    _endpoint : IOEndpoint\n    _ioPromise : IOPromise<this>\n\n    hasPendingIO() : IOPromise<this> { return this._ioPromise; }\n\n    fetch( options? : object ) : IOPromise<this> { throw new Error( \"Not implemented\" ); }\n\n    getEndpoint() : IOEndpoint {\n        return getOwnerEndpoint( this ) || this._endpoint;\n    }\n\n    // Map members to an object\n    mapObject<T>( iteratee : ( val : any, key : string | number ) => T, context? : any ) : { [ key : string ] : T }{\n        const obj : { [ key : string ] : T } = {},\n            fun = context !== void 0 ? ( v, k ) => iteratee.call( context, v, k ) : iteratee;\n        \n        this.each( ( val, key ) => {\n            const result = iteratee( val, key );\n            if( result !== void 0 ) obj[ key ] = result;\n        } );\n\n        return obj;\n    }\n    \n    /*********************************\n     * Validation API\n     */\n\n    // Lazily evaluated validation error\n    /** @private */\n    _validationError : ValidationError = void 0\n\n    // Validate ownership tree and return valudation error \n    get validationError() : ValidationError {\n        const error = this._validationError || ( this._validationError = new ValidationError( this ) );\n        return error.length ? error : null; \n    }\n\n    // Validate nested members. Returns errors count.\n    /** @private */\n    abstract _validateNested( errors : ChildrenErrors ) : number\n\n    // Object-level validator. Returns validation error.\n    validate( obj? : Transactional ) : any {}\n\n    // Return validation error (or undefined) for nested object with the given key. \n    getValidationError( key : string ) : any {\n        var error = this.validationError;\n        return ( key ? error && error.nested[ key ] : error ) || null;\n    }\n\n    // Get validation error for the given symbolic reference.\n    deepValidationError( reference : string ) : any {\n        return resolveReference( this, reference, ( object, key ) => object.getValidationError( key ) );\n    }\n\n    // Iterate through all validation errors across the ownership tree.\n    eachValidationError( iteratee : ( error : any, key : string, object : Transactional ) => void ) : void {\n        const { validationError } = this;\n        validationError && validationError.eachError( iteratee, this );\n    }\n\n    // Check whenever member with a given key is valid. \n    isValid( key : string ) : boolean {\n        return !this.getValidationError( key );\n    }\n\n    valueOf() : Object { return this.cid; }\n    toString(){ return this.cid; }\n\n    // Get class name for an object instance. Works fine with ES6 classes definitions (not in IE).\n    getClassName() : string {\n        const { name } = <any>this.constructor;\n        if( name !== 'Subclass' ) return name;\n    }\n\n    // Logging interface for run time errors and warnings.\n    abstract _log( level : string, text : string, value : any ) : void;\n}\n\nexport interface CloneOptions {\n    // 'Pin store' shall assign this._defaultStore = this.getStore();\n    pinStore? : boolean\n}\n\n// Owner must accept children update events. It's an only way children communicates with an owner.\n/** @private */\nexport interface Owner extends Traversable, Messenger {\n    _onChildrenChange( child : Transactional, options : TransactionOptions ) : void;\n    getOwner() : Owner\n    getStore() : Transactional\n}\n\n// Transaction object used for two-phase commit protocol.\n// Must be implemented by subclasses.\n// Transaction must be created if there are actual changes and when markIsDirty returns true.\n/** @private */ \nexport interface Transaction {\n    // Object transaction is being made on.\n    object : Transactional\n\n    // Send out change events, process update triggers, and close transaction.\n    // Nested transactions must be marked with isNested flag (it suppress owner notification).\n    commit( initiator? : Transactional )\n}\n\n// Options for distributed transaction  \nexport interface TransactionOptions {\n    // Invoke parsing \n    parse? : boolean\n\n    // Suppress change notifications and update triggers\n    silent? : boolean\n\n    // Update existing transactional members in place, or skip the update (ignored by models)\n    merge? : boolean // =true\n\n    // Should collections remove elements in set (ignored by models)  \n    remove? : boolean // =true\n\n    // Always replace enclosed objects with new instances\n    reset? : boolean // = false\n\n    // Do not dispose aggregated members\n    unset? : boolean\n\n    validate? : boolean\n\n    // `true` if the transaction is initiated as a result of IO operation\n    ioUpdate? : boolean\n\n    // The hint for IOEndpoint\n    // If `true`, `record.save()` will behave as \"upsert\" operation for the records having id.\n    upsert? : boolean\n}\n\n/**\n * Low-level transactions API. Must be used like this:\n * const isRoot = begin( record );\n * ...\n * isRoot && commit( record, options );\n * \n * When committing nested transaction, the flag must be set to true. \n * commit( object, options, isNested ) \n */\n\nexport const transactionApi = {\n    // Start transaction. Return true if it's the root one.\n    /** @private */\n    begin( object : Transactional ) : boolean {\n        return object._transaction ? false : ( object._transaction = true );  \n    },\n\n    // Mark object having changes inside of the current transaction.\n    // Returns true whenever there notifications are required.\n    /** @private */\n    markAsDirty( object : Transactional, options : TransactionOptions ) : boolean {\n        // If silent option is in effect, don't set isDirty flag.\n        const dirty = !options.silent;\n        if( dirty ) object._isDirty = options;\n        \n        // Reset version token.\n        object._changeToken = {};\n\n        // Object is changed, so validation must happen again. Clear the cache.\n        object._validationError = void 0;\n\n        return dirty;\n    },\n\n    // Commit transaction. Send out change event and notify owner. Returns true if there were changes.\n    // Must be executed for the root transaction only.\n    /** @private */\n    commit( object : Transactional, initiator? : Transactional ){\n        let originalOptions = object._isDirty;\n\n        if( originalOptions ){\n            // Send the sequence of change events, handling chained handlers.\n            while( object._isDirty ){\n                const options = object._isDirty;\n                object._isDirty = null; \n                trigger3( object, object._changeEventName, object, options, initiator );\n            }\n            \n            // Mark transaction as closed.\n            object._transaction = false;\n\n            // Notify owner on changes out of transaction scope.  \n            const { _owner } = object;  \n            if( _owner && _owner !== <any> initiator ){ // If it's the nested transaction, owner is already aware there are some changes.\n                _owner._onChildrenChange( object, originalOptions );\n            }\n        }\n        else{\n            // No changes. Silently close transaction.\n            object._isDirty = null;\n            object._transaction = false;\n        }\n    },\n\n    /************************************\n     * Ownership management\n     */\n\n    // Add reference to the record.\n    /** @private */\n    aquire( owner : Owner, child : Transactional, key? : string ) : boolean {\n        if( !child._owner ){\n            child._owner = owner;\n            child._ownerKey = key;\n            return true;\n        }\n\n        return child._owner === owner;\n    },\n\n    // Remove reference to the record.\n    /** @private */\n    free( owner : Owner, child : Transactional ) : void {\n        if( owner === child._owner ){\n            child._owner = void 0;\n            child._ownerKey = void 0;\n        }\n    }\n}\n\nfunction getOwnerEndpoint( self : Transactional ) : IOEndpoint {\n    // Check if we are the member of the collection...\n    const { collection } = self as any;\n    if( collection ){\n        return getOwnerEndpoint( collection );\n    }\n\n    // Now, if we're the member of the model...\n    if( self._owner ){\n        const { _endpoints } = self._owner as any;\n        return _endpoints && _endpoints[ self._ownerKey ];\n    }\n}\n","import { Transactional, Transaction, TransactionOptions, Owner, transactionApi } from \"../../transactions\"\nconst { begin : _begin, markAsDirty : _markAsDirty, commit } = transactionApi;\n\nimport { eventsApi } from '../../object-plus'\nconst { trigger3 } = eventsApi;\n\nexport interface ConstructorsMixin {\n    Attributes : AttributesConstructor\n    AttributesCopy : AttributesCopyConstructor\n}\n\nexport interface ConstructorOptions extends TransactionOptions{\n    clone? : boolean\n}\n\nexport type AttributesConstructor = new ( record : AttributesContainer, values : object, options : TransactionOptions ) => AttributesValues;\nexport type AttributesCopyConstructor = new ( values : object ) => AttributesValues;\n\nexport interface AttributesContainer extends Transactional, Owner, ConstructorsMixin {\n    // Attribute descriptors.\n    _attributes : AttributesDescriptors\n\n    // Attribute values.\n    attributes : AttributesValues\n\n    // Previous attribute values.\n    _previousAttributes : AttributesValues\n\n    // Changed attributes cache. \n    _changedAttributes : AttributesValues\n}\n\nexport interface AttributesValues {\n    [ name : string ] : any\n}\n\nexport interface AttributesDescriptors {\n    [ name : string ] : AttributeUpdatePipeline\n}\n\nexport interface AttributeUpdatePipeline{\n    doUpdate( value, record : AttributesContainer, options : TransactionOptions, nested? : Transaction[] ) : boolean\n}\n\n // Optimized single attribute transactional update. To be called from attributes setters\n // options.silent === false, parse === false. \nexport function setAttribute( record : AttributesContainer, name : string, value : any ) : void {\n    // Open the transaction.\n    const isRoot  = begin( record ),\n          options = {};\n\n    // Update attribute.      \n    if( record._attributes[ name ].doUpdate( value, record, options ) ){\n        // Notify listeners on changes.\n        markAsDirty( record, options );\n        trigger3( record, 'change:' + name, record, record.attributes[ name ], options );\n    }\n\n    // Close the transaction.\n    isRoot && commit( record );\n}\n\nfunction begin( record : AttributesContainer ){\n    if( _begin( record ) ){\n        record._previousAttributes = new record.AttributesCopy( record.attributes );\n        record._changedAttributes = null;\n        return true;\n    }\n    \n    return false;\n}\n\nfunction markAsDirty( record : AttributesContainer, options : TransactionOptions ){\n    // Need to recalculate changed attributes, when we have nested set in change:attr handler\n    if( record._changedAttributes ){\n        record._changedAttributes = null;\n    }\n\n    return _markAsDirty( record, options );\n}\n\n/**\n * TODO: There's an opportunity to create an optimized pipeline for primitive types and Date, which makes the majority\n * of attributes. It might create the major speedup.\n * \n * Create the dedicated pipeline for owned and shared attributes as well.\n * \n * Three elements of the pipeline:\n * - from constructor\n * - from assignment\n * - from `set`\n */\n\nexport const UpdateRecordMixin = {\n// Need to override it here, since begin/end transaction brackets are overriden. \n    transaction( this : AttributesContainer, fun : ( self : AttributesContainer ) => void, options : TransactionOptions = {} ) : void{\n        const isRoot = begin( this );\n        fun.call( this, this );\n        isRoot && commit( this );\n    },\n            \n    // Handle nested changes. TODO: propagateChanges == false, same in transaction.\n    _onChildrenChange( child : Transactional, options : TransactionOptions ) : void {\n        const { _ownerKey } = child,\n              attribute = this._attributes[ _ownerKey ];\n\n        if( !attribute /* TODO: Must be an opposite, likely the bug */ || attribute.propagateChanges ) this.forceAttributeChange( _ownerKey, options );\n    },\n\n    // Simulate attribute change \n    forceAttributeChange( key : string, options : TransactionOptions = {} ){\n        // Touch an attribute in bounds of transaction\n        const isRoot = begin( this );\n\n        if( markAsDirty( this, options ) ){\n            trigger3( this, 'change:' + key, this, this.attributes[ key ], options );\n        }\n        \n        isRoot && commit( this );\n    },\n\n    _createTransaction( this : AttributesContainer, a_values : {}, options : TransactionOptions = {} ) : Transaction {\n        const isRoot = begin( this ),\n                changes : string[] = [],\n                nested : RecordTransaction[]= [],\n                { _attributes } = this,\n                values = options.parse ? this.parse( a_values, options ) : a_values;\n\n        let unknown;\n\n        if( shouldBeAnObject( this, values ) ){\n            for( let name in values ){\n                const spec = _attributes[ name ];\n\n                if( spec ){\n                    if( spec.doUpdate( values[ name ], this, options, nested ) ){\n                        changes.push( name );\n                    }\n                }\n                else{\n                    unknown || ( unknown = [] );\n                    unknown.push( `'${ name }'` );\n                }\n            }\n\n            if( unknown ){\n                // this._log( 'warn', `Undefined attributes ${ unknown.join(', ')} are ignored!`, values );\n            }\n        }\n        \n        if( changes.length && markAsDirty( this, options ) ){\n            return new RecordTransaction( this, isRoot, nested, changes );\n        }\n        \n        // No changes, but there might be silent attributes with open transactions.\n        for( let pendingTransaction of nested ){\n            pendingTransaction.commit( this );\n        }\n\n        isRoot && commit( this );\n    }\n};\n\n// One of the main performance tricks of Type-R.\n// Create loop unrolled constructors for internal attribute hash,\n// so the hidden class JIT optimization will be engaged and they will become static structs.\n// It dramatically improves record performance.\nexport function constructorsMixin( attrDefs : AttributesDescriptors ) : ConstructorsMixin {\n    const attrs = Object.keys( attrDefs );\n\n    const AttributesCopy : AttributesCopyConstructor = new Function( 'values', `\n        ${ attrs.map( attr =>`\n            this.${ attr } = values.${ attr };\n        `).join( '' ) }\n    `) as any;\n\n    AttributesCopy.prototype = Object.prototype;\n\n    const Attributes : AttributesConstructor = new Function( 'record', 'values', 'options', `\n        var _attrs = record._attributes;\n\n        ${ attrs.map( attr =>`\n            this.${ attr } = _attrs.${ attr }.doInit( values.${ attr }, record, options );\n        `).join( '' ) }\n    `) as any;\n\n    Attributes.prototype = Object.prototype;\n\n    return { Attributes, AttributesCopy };\n}\n\nexport function shouldBeAnObject( record : AttributesContainer, values : object ){\n    if( values && values.constructor === Object ) return true;\n\n    record._log( 'warn', 'update with non-object is ignored!', { values } );\n    return false;\n}\n\n// Transaction class. Implements two-phase transactions on object's tree. \n// Transaction must be created if there are actual changes and when markIsDirty returns true. \nexport class RecordTransaction implements Transaction {\n    // open transaction\n    constructor( public object : AttributesContainer,\n                 public isRoot : boolean,\n                 public nested : Transaction[],\n                 public changes : string[] ){}\n\n    // commit transaction\n    commit( initiator? : AttributesContainer ) : void {\n        const { nested, object, changes } = this;\n\n        // Commit all pending nested transactions...\n        for( let transaction of nested ){ \n            transaction.commit( object );\n        }\n\n        // Notify listeners on attribute changes...\n        // Transaction is never created when silent option is set, so just send events out.\n        const { attributes, _isDirty } = object;\n        for( let key of changes ){\n            trigger3( object, 'change:' + key, object, attributes[ key ], _isDirty );\n        }\n\n        this.isRoot && commit( object, initiator );\n    }\n}","import { setAttribute, AttributesContainer, AttributeUpdatePipeline, RecordTransaction } from './updates'\nimport { tools } from '../../object-plus'\nimport { Owner, Transactional, TransactionOptions } from '../../transactions'\nimport { IOEndpoint } from '../../io-tools'\n\nconst { notEqual, assign} = tools;\n\ndeclare global {\n    interface Function {\n        _attribute : typeof AnyType\n    }\n}\n\nexport type Transform = ( this : AnyType, next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) => any;\nexport type ChangeHandler = ( this : AnyType, next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) => void;\n\nexport interface AttributeOptions {\n    _attribute? : typeof AnyType\n    validate? : ( record : AttributesContainer, value : any, key : string ) => any\n    isRequired? : boolean\n    changeEvents? : boolean\n\n    endpoint? : IOEndpoint\n\n    type? : Function\n    value? : any\n    hasCustomDefault? : boolean\n\n    parse? : Parse\n    toJSON? : AttributeToJSON\n   \n    getHooks? : GetHook[]\n    transforms? : Transform[]\n    changeHandlers? : ChangeHandler[]\n\n    _onChange? : ChangeAttrHandler\n}\n\nexport type Parse = ( value : any, key : string ) => any;\nexport type GetHook = ( value : any, key : string ) => any;\nexport type AttributeToJSON = ( value : any, key : string ) => any\nexport type AttributeParse = ( value : any, key : string ) => any\nexport type ChangeAttrHandler = ( ( value : any, attr : string ) => void ) | string;\n\n// TODO: interface differs from options, do something obout it\nconst emptyOptions : TransactionOptions = {};\n\n/**\n * Typeless attribute. Is the base class for all other attributes.\n */\nexport class AnyType implements AttributeUpdatePipeline {\n    // Factory method to create attribute from options \n    static create( options : AttributeOptions, name : string ) : AnyType {\n        const type = options.type,\n              AttributeCtor = options._attribute || ( type ? type._attribute : AnyType );\n\n        return new AttributeCtor( name, options );\n    }\n    /**\n     * Update pipeline functions\n     * =========================\n     *\n     * Stage 0. canBeUpdated( value )\n     * - presence of this function implies attribute's ability to update in place.\n     */\n    canBeUpdated( prev, next, options : TransactionOptions ) : any {}\n\n    /**\n     * Stage 1. Transform stage\n     */\n    transform( next : any, prev : any, model : AttributesContainer, options : TransactionOptions ) : any { return next; }\n\n    // convert attribute type to `this.type`.\n    convert( next : any, prev : any, model : AttributesContainer, options : TransactionOptions ) : any { return next; }\n\n    /**\n     * Stage 2. Check if attr value is changed\n     */\n    isChanged( a : any, b : any ) : boolean {\n        return notEqual( a, b );\n    }\n\n    /**\n     * Stage 3. Handle attribute change\n     */\n    handleChange( next : any, prev : any, model : AttributesContainer, options : TransactionOptions ) {}\n\n    /**\n     * End update pipeline definitions.\n     */\n\n    // create empty object passing backbone options to constructor...\n    create() { return void 0; }\n\n    // generic clone function for typeless attributes\n    // Must be overriden in sublass\n    clone( value : any, record : AttributesContainer ) {\n        return value;\n    }\n\n    dispose( record : AttributesContainer, value : any ) : void {\n        this.handleChange( void 0, value, record, emptyOptions );\n    }\n\n    validate( record : AttributesContainer, value : any, key : string ){}\n\n    toJSON( value, key, options? : object ) {\n        return value && value.toJSON ? value.toJSON( options ) : value;\n    }\n\n    createPropertyDescriptor() : PropertyDescriptor | void {\n        const { name, getHook } = this;\n\n        if( name !== 'id' ){\n            return {\n                // call to optimized set function for single argument.\n                set( value ){\n                    setAttribute( this, name, value );\n                },\n\n                // attach get hook to the getter function, if it present\n                get : (\n                    getHook ?\n                        function() {\n                            return getHook.call( this, this.attributes[ name ], name );\n                        } :\n                        function() { return this.attributes[ name ]; }\n                )\n            }\n        }\n    }\n\n    value : any\n\n    // Used as global default value for the given metatype\n    static defaultValue : any;\n\n    type : Function\n\n    initialize( name : string, options : TransactionOptions ){}\n\n    options : AttributeOptions\n\n    doInit( value, record : AttributesContainer, options : TransactionOptions ){\n        const v = value === void 0 ? this.defaultValue() : value,\n            x = this.transform( v, void 0, record, options );\n            \n        this.handleChange( x, void 0, record, options );\n        return x;\n    }\n\n    doUpdate( value, record : AttributesContainer, options : TransactionOptions, nested? : RecordTransaction[] ){\n        const { name } = this,\n            { attributes } = record,\n              prev = attributes[ name ];\n\n        const next = this.transform( value, prev, record, options );\n        attributes[ name ] = next;\n\n        if( this.isChanged( next, prev ) ) {\n            // Do the rest of the job after assignment\n            this.handleChange( next, prev, record, options );\n            return true;\n        }\n\n        return false;\n    }\n\n    propagateChanges : boolean\n\n    _log( level : tools.LogLevel, text : string, value, record : AttributesContainer ){\n        tools.log( level, `[Attribute Update Error] ${ record.getClassName() }.${ this.name }: ` + text, {\n            'Record' : record,\n            'Attribute definition' : this,\n            'Prev. value' : record.attributes[ this.name ],\n            'New value' : value\n        });\n    }\n\n    defaultValue(){\n        return this.value;\n    }\n\n    constructor( public name : string, a_options : AttributeOptions ) {        \n        // Save original options...\n        this.options = a_options;\n\n        // Clone options.\n        const options : AttributeOptions = assign( { getHooks : [], transforms : [], changeHandlers : [] }, a_options );\n        options.getHooks = options.getHooks.slice();\n        options.transforms = options.transforms.slice();\n        options.changeHandlers = options.changeHandlers.slice();\n\n        const {\n                  value, type, parse, toJSON, changeEvents,\n                  validate, getHooks, transforms, changeHandlers\n              } = options;\n\n        // Initialize default value...\n        this.value = value;\n        this.type  = type;\n\n        // TODO: An opportunity to optimize for attribute subtype.\n        if( !options.hasCustomDefault && type ){\n            this.defaultValue = this.create;\n        }\n        else if( tools.isValidJSON( value ) ){ \n            // JSON literals must be deep copied.\n            this.defaultValue = new Function( `return ${ JSON.stringify( value ) };` ) as any;\n        }\n        else{\n            this.defaultValue = this.defaultValue;\n        }\n\n        // Changes must be bubbled when they are not disabled for an attribute and transactional object.\n        this.propagateChanges = changeEvents !== false;\n\n        this.toJSON = toJSON === void 0 ? this.toJSON : toJSON;\n\n        this.validate = validate || this.validate;\n        \n        if( options.isRequired ){\n            this.validate = wrapIsRequired( this.validate );\n        }\n\n        /**\n         * Assemble pipelines...\n         */\n\n        // `convert` is default transform, which is always present...\n        transforms.unshift( this.convert );\n\n        // Get hook from the attribute will be used first...\n        if( this.get ) getHooks.unshift( this.get );\n\n        // let subclasses configure the pipeline...\n        this.initialize.call( this, options );\n\n        // let attribute spec configure the pipeline...\n        if( getHooks.length ){\n            const getHook = this.getHook = getHooks.reduce( chainGetHooks );\n\n            const { validate } = this;\n            this.validate = function( record : AttributesContainer, value : any, key : string ){\n                return validate.call( this, record, getHook.call( record, value, key ), key );\n            }\n        }\n        \n        this.transform = transforms.length ? transforms.reduce( chainTransforms ) : this.transform;\n        \n        this.handleChange = changeHandlers.length ? changeHandlers.reduce( chainChangeHandlers ) : this.handleChange;\n\n        // Attribute-level parse transform are attached as update hooks modifiers...\n        const { doInit, doUpdate } = this;\n        this.doInit = parse ? function( value, record : AttributesContainer, options : TransactionOptions ){\n            return doInit.call( this, options.parse && value !== void 0 ? parse.call( record, value, this.name ) : value, record, options );\n        } : doInit;\n\n        this.doUpdate = parse ? function( value, record : AttributesContainer, options : TransactionOptions, nested? : RecordTransaction[] ){\n            return doUpdate.call( this, options.parse && value !== void 0 ? parse.call( record, value, this.name ) : value, record, options, nested );\n        } : doUpdate;\n    }\n\n    getHook : ( value, key : string ) => any = null\n    get : ( value, key : string ) => any\n}\n\n\nfunction chainGetHooks( prevHook : GetHook, nextHook : GetHook ) : GetHook {\n    return function( value, name ) {\n        return nextHook.call( this, prevHook.call( this, value, name ), name );\n    }\n}\n\nfunction chainTransforms( prevTransform : Transform, nextTransform : Transform ) : Transform {\n    return function( next, prev, record, options ) {\n        return nextTransform.call( this, prevTransform.call( this, next, prev, record, options ), prev, record, options );\n    }\n}\n\nfunction chainChangeHandlers( prevHandler : ChangeHandler, nextHandler : ChangeHandler ) : ChangeHandler {\n    return function( next, prev, record, options ) {\n        prevHandler.call( this, next, prev, record, options );\n        nextHandler.call( this, next, prev, record, options );\n    }\n}\n\nfunction wrapIsRequired( validate ){\n    return function( record : AttributesContainer, value : any, key : string ){\n        return value ? validate.call( this, record, value, key ) : 'Required';\n    }\n}","import { AnyType } from './any'\nimport { Owner, transactionApi, Transactional, ItemsBehavior, TransactionOptions } from '../../transactions'\nimport { tools } from '../../object-plus'\nimport { AttributesContainer, ConstructorOptions } from './updates'\nimport { ValidationError } from '../../validation'\n\nconst { free, aquire } = transactionApi;\n\nexport class AggregatedType extends AnyType {\n    type : typeof Transactional\n\n    clone( value : Transactional ) : Transactional {\n        return value ? value.clone() : value;\n    }\n\n    toJSON( x, key : string, options : object ){ return x && x.toJSON( options ); }\n\n    doInit( value, record : AttributesContainer, options : ConstructorOptions ){\n        const v = options.clone ? this.clone( value ) : (\n            value === void 0 ? this.defaultValue() : value\n        );\n\n        const x = this.transform( v, void 0, record, options );\n        this.handleChange( x, void 0, record, options );\n        return x;\n    }\n\n    doUpdate( value, record, options, nested : any[] ){ // Last to things can be wrapped to an object, either transaction or ad-hoc\n        const key = this.name, { attributes } = record; \n        const prev = attributes[ key ];\n        let update;\n\n        // This can be moved to transactional attribute. And chained with the rest.\n        if( update = this.canBeUpdated( prev, value, options ) ) { // todo - skip empty updates.\n            const nestedTransaction = prev._createTransaction( update, options );\n            if( nestedTransaction ){\n                if( nested ){\n                    nested.push( nestedTransaction );\n                }\n                else{\n                    nestedTransaction.commit( record );\n                }\n\n                if( this.propagateChanges ) return true;\n            }\n\n            return false;\n        }\n\n        const next = this.transform( value, prev, record, options );\n        attributes[ key ] = next;\n\n        if( this.isChanged( next, prev ) ) { // Primitives and nested comparison can be inlined.\n            // Do the rest of the job after assignment\n            this.handleChange( next, prev, record, options );\n\n            return true;\n        }\n\n        return false;\n    }\n\n    canBeUpdated( prev : Transactional, next : any, options : TransactionOptions ) : any {\n        // If an object already exists, and new value is of incompatible type, let object handle the update.\n        if( prev && next != null ){\n            if( next instanceof this.type ){\n                // In case if merge option explicitly specified, force merge.\n                if( options.merge ) return next.__inner_state__;\n            }\n            else{\n                return next;\n            }\n        }\n    }\n\n    convert( next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) : Transactional {\n        // Invoke class factory to handle abstract classes\n        if( next == null ) return next;\n        \n        if( next instanceof this.type ){\n            if( next._shared && !( next._shared & ItemsBehavior.persistent ) ) { // TODO: think more about shared types assignment compatibility. \n                this._log( 'error', 'aggregated collection attribute is assigned with shared collection', next, record );\n            }\n\n            // With explicit 'merge' option we need to clone an object if its previous value was 'null'.\n            // This is an only case we could be here when merge === true.\n            return options.merge ? next.clone() : next;\n        }\n\n        return <any>this.type.create( next, options );\n    }\n\n    dispose ( record : AttributesContainer, value : Transactional ){\n        if( value ){\n            this.handleChange( void 0, value, record, {} );\n        }\n    }\n\n    validate( record : AttributesContainer, value : Transactional ) : ValidationError {\n        var error = value && value.validationError;\n        if( error ) return error;\n    }\n\n    create() : Transactional {\n        return (<any>this.type).create(); // this the subclass of Transactional here.\n    }\n\n    initialize( options ){\n        options.changeHandlers.unshift( this._handleChange );\n    }\n\n    _handleChange( next : Transactional, prev : Transactional, record : AttributesContainer, options : TransactionOptions ){\n        if( prev ){\n            free( record, prev );\n            options.unset || prev.dispose();\n        } \n        \n        if( next && !aquire( record, next, this.name ) ){\n            this._log( 'error', 'aggregated attribute assigned with object already having an owner', next, record );\n        }\n    }\n}","/**\n * Type spec engine. Declare attributes using chainable syntax,\n * and returns object with spec.\n */\nimport { Transactional } from '../../transactions'\nimport { ChangeAttrHandler, AttributeOptions, Parse } from './any'\nimport {  AttributesContainer } from './updates'\nimport { EventMap, EventsDefinition, definitionDecorator, tools } from '../../object-plus'\nimport { IOEndpoint } from '../../io-tools'\n\nconst { assign } = tools;\n\nexport interface AttributeCheck {\n    ( value : any, key : string ) : boolean\n    error? : any\n}\n\nexport class ChainableAttributeSpec {\n    options : AttributeOptions;\n\n    constructor( options : AttributeOptions ) {\n        // Shallow copy options, fill it with defaults.\n        this.options = { getHooks : [], transforms : [], changeHandlers : []};\n        if( options ) assign( this.options, options );\n    }\n\n    check( check : AttributeCheck, error : any ) : ChainableAttributeSpec {\n        function validate( model, value, name ){\n            if( !check.call( model, value, name ) ){\n                const msg = error || check.error || name + ' is not valid';\n                return typeof msg === 'function' ? msg.call( model, name ) : msg;\n            }\n        }\n\n        const prev = this.options.validate;\n\n        return this.metadata({\n            validate : prev ? (\n                            function( model, value, name ){\n                                return prev( model, value, name ) || validate( model, value, name );\n                            }\n                       ) : validate\n        });\n    }\n\n    get asProp(){\n        return definitionDecorator( 'attributes', this );\n    }\n\n    get as(){ return this.asProp; }\n\n    get isRequired() : ChainableAttributeSpec {\n        return this.metadata({ isRequired : true }); \n    }\n\n    endpoint( endpoint : IOEndpoint ){\n        return this.metadata({ endpoint });\n    }\n\n    watcher( ref : string | ( ( value : any, key : string ) => void ) ) : ChainableAttributeSpec {\n        return this.metadata({ _onChange : ref });\n    }\n\n    // Attribute-specific parse transform\n    parse( fun : Parse ) : ChainableAttributeSpec {\n        return this.metadata({ parse : fun });\n    }\n\n    toJSON( fun ) : ChainableAttributeSpec {\n        return this.metadata({\n            toJSON : typeof fun === 'function' ? fun : ( fun ? ( x, k, o ) => x && x.toJSON( o ) : emptyFunction ) \n        });\n    }\n\n    // Attribute get hook.\n    get( fun ) : ChainableAttributeSpec {\n        return this.metadata({\n            getHooks : this.options.getHooks.concat( fun )\n        });\n    }\n\n    // Attribute set hook.\n    set( fun ) : ChainableAttributeSpec {\n        function handleSetHook( next, prev, record : AttributesContainer, options ) {\n            if( this.isChanged( next, prev ) ) {\n                const changed = fun.call( record, next, this.name );\n                return changed === void 0 ? prev : this.convert( changed, prev, record, options );\n            }\n\n            return prev;\n        }\n\n        return this.metadata({\n            transforms : this.options.transforms.concat( handleSetHook )\n        });\n    }\n\n    changeEvents( events : boolean ) : ChainableAttributeSpec {\n        return this.metadata({ changeEvents : events });\n    }\n\n    // Subsribe to events from an attribute.\n    events( map : EventsDefinition ) : ChainableAttributeSpec {\n        const eventMap = new EventMap( map );\n\n        function handleEventsSubscribtion( next, prev, record : AttributesContainer ){\n            prev && prev.trigger && eventMap.unsubscribe( record, prev );\n\n            next && next.trigger && eventMap.subscribe( record, next );\n        }\n\n        return this.metadata({\n            changeHandlers : this.options.changeHandlers.concat( handleEventsSubscribtion )\n        });\n    }\n\n    // Creates a copy of the spec.\n    get has() : ChainableAttributeSpec {\n        return this;\n    }\n\n    metadata( options : AttributeOptions ) : ChainableAttributeSpec {\n        const cloned = new ChainableAttributeSpec( this.options );\n        assign( cloned.options, options );\n        return cloned;\n    }\n\n    value( x ) : ChainableAttributeSpec {\n        return this.metadata({ value : x, hasCustomDefault : true });\n    }\n\n    static from( spec : any ) : ChainableAttributeSpec {\n        let attrSpec : ChainableAttributeSpec;\n\n        if( typeof spec === 'function' ) {\n            attrSpec = spec.has;\n        }\n        else if( spec && spec instanceof ChainableAttributeSpec ) {\n            attrSpec = spec;\n        }\n        else{\n            // Infer type from value.\n            const type = inferType( spec );\n    \n            // Transactional types inferred from values must have shared type. \n            if( type && type.prototype instanceof Transactional ){\n                attrSpec = (<any>type).shared.value( spec );\n            }\n            // All others will be created in regular way.\n            else{\n                attrSpec = new ChainableAttributeSpec({ type : type, value : spec, hasCustomDefault : true });\n            }\n        }\n    \n        return attrSpec;\n    }\n}\n\nfunction emptyFunction(){}\n\nexport function type( this : void, spec : ChainableAttributeSpec | Function ) : ChainableAttributeSpec {\n    return spec instanceof ChainableAttributeSpec ? spec : new ChainableAttributeSpec( {\n        type : spec,\n        value : spec._attribute.defaultValue,\n        hasCustomDefault : spec._attribute.defaultValue !== void 0\n    } );;\n}\n\ndeclare global {\n    interface Function{\n        value : ( x : any ) => ChainableAttributeSpec;\n        isRequired : ChainableAttributeSpec;\n        asProp : PropertyDecorator\n        has : ChainableAttributeSpec;\n    }\n}\n\nFunction.prototype.value = function( x ) {\n    return new ChainableAttributeSpec( { type : this, value : x, hasCustomDefault : true } );\n};\n\nObject.defineProperty( Function.prototype, 'isRequired', {\n    get() { return this._isRequired || this.has.isRequired; },\n    set( x ){ this._isRequired = x; }\n});\n\nObject.defineProperty( Function.prototype, 'asProp', {\n    get() { return this.has.asProp; },\n});\n\nObject.defineProperty( Function.prototype, 'has', {\n    get() {\n        // workaround for sinon.js and other libraries overriding 'has'\n        return this._has || type( this );\n    },\n\n    set( value ) { this._has = value; }\n} );\n\nfunction inferType( value : {} ) : Function {\n    switch( typeof value ) {\n        case 'number' :\n            return Number;\n        case 'string' :\n            return String;\n        case 'boolean' :\n            return Boolean;\n        case 'undefined' :\n            return void 0;\n        case 'object' :\n            return value ? <any> value.constructor : void 0;\n    }\n}\n","/**\n * Date attribute type.\n * \n * Implements validation, cross-browser compatibility fixes, variety of Date serialization formats,\n * and optimized update pipeline.\n */\nimport { AnyType } from './any'\nimport { tools } from '../../object-plus'\nimport { AttributesContainer } from './updates'\nimport { TransactionOptions } from '../../transactions'\nimport { ChainableAttributeSpec } from './attrDef'\n\nconst DateProto = Date.prototype;\n\n// Date Attribute\n/** @private */\nexport class DateType extends AnyType {\n    create(){\n        return new Date();\n    }\n    \n    convert( next : any, a, record ){\n        if( next == null || next instanceof Date ) return next;\n\n        const date = new Date( next ),\n              timestamp = date.getTime();\n\n        if( timestamp !== timestamp ){\n            this._log( 'warn', 'assigned with Invalid Date', next, record );\n        }\n\n        return date;\n    }\n\n    validate( model, value, name ) {\n        if( value != null ){\n            const timestamp = value.getTime(); \n            if( timestamp !== timestamp ) return name + ' is Invalid Date';\n        }\n    }\n\n    toJSON( value ) { return value && value.toISOString(); }\n\n    isChanged( a, b ) { return ( a && a.getTime() ) !== ( b && b.getTime() ); }\n\n    doInit( value, record : AttributesContainer, options : TransactionOptions ){\n        // Date don't have handleChanges step.\n        return this.transform( value === void 0 ? this.defaultValue() : value, void 0, record, options );\n    }\n\n    doUpdate( value, record, options, nested ){\n        const   { name } = this,\n                { attributes } = record,\n                prev = attributes[ name ];\n        \n        // Date don't have handleChanges step.\n        return this.isChanged( prev , attributes[ name ] = this.transform( value, prev, record, options ) );\n    }\n\n    clone( value ) { return value && new Date( value.getTime() ); }\n    dispose(){}\n}\n\nDate._attribute = DateType;\n\nconst msDatePattern  = /\\/Date\\(([0-9]+)\\)\\//;\n\nexport class MSDateType extends DateType {\n    convert( next ) {\n        if( typeof next === 'string' ){\n            const msDate = msDatePattern.exec( next );\n            if( msDate ){\n                return new Date( Number( msDate[ 1 ] ) );\n            }\n        }\n\n        return DateType.prototype.convert.apply( this, arguments );\n    }\n\n    toJSON( value ) { return value && `/Date(${ value.getTime() })/`; }\n}\n\nexport class TimestampType extends DateType {\n    toJSON( value ) { return value && value.getTime(); }\n}\n\ndeclare global {\n    interface DateConstructor {\n        microsoft : ChainableAttributeSpec\n        timestamp :  ChainableAttributeSpec\n    }\n}\n\nObject.defineProperties( Date, {\n    microsoft : {\n        get(){\n            return new ChainableAttributeSpec({\n                type : Date,\n                _attribute : MSDateType\n            })\n        }\n    },\n\n    timestamp : {\n        get(){\n            return new ChainableAttributeSpec({\n                type : Date,\n                _attribute : TimestampType\n            })\n        }\n    }\n});\n\n// If ISO date is not supported by date constructor (such as in Safari), polyfill it.\nfunction supportsDate( date ){\n    return !isNaN( ( new Date( date ) ).getTime() );\n}\n\nif( !supportsDate('2011-11-29T15:52:30.5') ||\n    !supportsDate('2011-11-29T15:52:30.52') ||\n    !supportsDate('2011-11-29T15:52:18.867') ||\n    !supportsDate('2011-11-29T15:52:18.867Z') ||\n    !supportsDate('2011-11-29T15:52:18.867-03:30') ){\n\n    DateType.prototype.convert = function( value ){\n        return value == null || value instanceof Date ? value : new Date( safeParseDate( value ) );\n    }\n}\n\nconst numericKeys    = [ 1, 4, 5, 6, 7, 10, 11 ],\n      isoDatePattern = /^(\\d{4}|[+\\-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/;\n\nfunction safeParseDate( date : string ) : number {\n    var timestamp, struct : any[], minutesOffset = 0;\n\n    if( ( struct = isoDatePattern.exec( date )) ) {\n        // avoid NaN timestamps caused by undefined values being passed to Date.UTC\n        for( var i = 0, k; ( k = numericKeys[ i ] ); ++i ) {\n            struct[ k ] = +struct[ k ] || 0;\n        }\n\n        // allow undefined days and months\n        struct[ 2 ] = (+struct[ 2 ] || 1) - 1;\n        struct[ 3 ] = +struct[ 3 ] || 1;\n\n        if( struct[ 8 ] !== 'Z' && struct[ 9 ] !== undefined ) {\n            minutesOffset = struct[ 10 ] * 60 + struct[ 11 ];\n\n            if( struct[ 9 ] === '+' ) {\n                minutesOffset = 0 - minutesOffset;\n            }\n        }\n\n        timestamp =\n            Date.UTC( struct[ 1 ], struct[ 2 ], struct[ 3 ], struct[ 4 ], struct[ 5 ] + minutesOffset, struct[ 6 ],\n                    struct[ 7 ] );\n    }\n    else {\n        timestamp = Date.parse( date );\n    }\n\n    return timestamp;\n}","/**\n * Built-in JSON types attributes: Object, Array, Number, String, Boolean, and immutable class.\n * \n * Adds type assertions, default validation, and optimized update pipeline.\n */\n\nimport { AnyType } from './any'\nimport { tools } from '../../object-plus'\nimport { AttributesContainer } from './updates'\nimport { TransactionOptions } from '../../transactions'\n\n/**\n * Custom class must be immutable class which implements toJSON() method\n * with a constructor taking json.\n */\nclass ImmutableClassType extends AnyType {\n    type : new ( value? : any ) => {}\n\n    create(){\n        return new this.type();\n    }\n\n    convert( next : any ) : any {\n        return next == null || next instanceof this.type ? next : new this.type( next );\n    }\n\n    toJSON( value, key? : string, options? : object ){\n        return value && value.toJSON ? value.toJSON( options ) : value;\n    }\n\n    clone( value ) {\n        return new this.type( this.toJSON( value ) );\n    }\n\n    isChanged( a, b ){\n        return a !== b;\n    }\n}\n\nFunction.prototype._attribute = ImmutableClassType;\n\n/**\n * Optimized attribute of primitive type.\n * \n * Primitives has specialized simplified pipeline.\n */\nexport class PrimitiveType extends AnyType {\n    type : NumberConstructor | StringConstructor | BooleanConstructor\n\n    dispose(){}\n    create() { return this.type(); }\n\n    toJSON( value ) { return value; }\n\n    convert( next ) { return next == null ? next : this.type( next ); }\n\n    isChanged( a, b ) { return a !== b; }\n\n    clone( value ) { return value; }\n\n    doInit( value, record : AttributesContainer, options : TransactionOptions ){\n        return this.transform( value === void 0 ? this.value : value, void 0, record, options );\n    }\n\n    doUpdate( value, record, options, nested ){\n        const   { name } = this,\n                { attributes } = record,\n                prev = attributes[ name ];\n        \n        return prev !== ( attributes[ name ] = this.transform( value, prev, record, options ) );\n    }\n\n    initialize(){\n        if( !this.options.hasCustomDefault ){\n            this.value = this.type();\n        }\n    }\n}\n\nBoolean._attribute = String._attribute = PrimitiveType;\n\n// Number type with special validation algothim.\n/** @private */ \nexport class NumericType extends PrimitiveType {\n    type : NumberConstructor\n\n    create(){\n        return 0;\n    }\n\n    convert( next, prev?, record? ) {\n        const num = next == null ? next : this.type( next );\n\n        if( num !== num ){\n            this._log( 'warn', 'assigned with Invalid Number', next, record );\n        }\n        \n        return num;\n    }\n\n    validate( model, value, name ) {\n        // Whatever is not symmetrically serializable to JSON, is not valid by default.\n        if( value != null && !isFinite( value ) ) {\n            return name + ' is not valid number';\n        }\n    }\n}\n\nNumber._attribute = NumericType;\n\n/**\n * Add Number.integer attrubute type\n */\ndeclare global {\n    interface NumberConstructor {\n        integer : Function\n    }\n\n    interface Window {\n        Integer : Function;\n    }\n}\n\nfunction Integer( x ){\n    return x ? Math.round( x ) : 0;\n}\nInteger._attribute = NumericType;\nNumber.integer = Integer;\n\n\nif( typeof window !== 'undefined' ){\n    window.Integer = Number.integer;\n}\n\n/**\n * Compatibility wrapper for Array type.\n * @private\n */ \nexport class ArrayType extends AnyType {\n    toJSON( value ) { return value; }\n    dispose(){}\n    create(){ return []; }\n\n    convert( next, prev, record ) {\n        // Fix incompatible constructor behaviour of Array...\n        if( next == null || Array.isArray( next ) ) return next;\n\n        this._log( 'warn', 'assignment of non-array to Array attribute is ignored', next, record );\n\n        return [];\n    }\n\n    clone( value ){\n        return value && value.slice();\n    }\n}\n\nArray._attribute = ArrayType;\n\nexport class ObjectType extends AnyType {\n    create(){ return {}; }\n\n    convert( next, prev, record ) {\n        if( next == null || typeof next === 'object' ) return next;\n                \n        this._log( 'warn', 'assignment of non-object to Object attribute is ignored', next, record );\n        return {};\n    }\n}\n\nObject._attribute = ObjectType;\n\nexport function doNothing(){}\n\nexport class FunctionType extends AnyType {\n    // Functions are not serialized.\n    toJSON( value ) { return void 0; }\n    create(){ return doNothing; }\n    dispose(){}\n\n    convert( next, prev, record ) {\n        // Fix incompatible constructor behaviour of Function...\n        if( next == null || typeof next === 'function' ) return next;\n\n        this._log( 'warn', 'assigned with non-function', next, record );\n\n        return doNothing;\n    }\n\n    // Functions are not cloned.\n    clone( value ){ return value; }\n}\n\nFunction._attribute = FunctionType;","import { AnyType } from './any'\nimport { AttributesContainer, ConstructorOptions } from './updates'\nimport { ItemsBehavior, Owner, transactionApi, Transactional, TransactionOptions } from '../../transactions' \nimport { tools, eventsApi } from '../../object-plus'\n\nconst { on, off } = eventsApi,\n    { free, aquire } = transactionApi;\n\n/************************\n * Shared attribute definition.\n * - Not serialized.\n * - Listening to the changes.\n * - Doesn't take ownership when assigned with object of proper type.\n * - Takes ownership on objects which are converted.\n */\n\nconst shareAndListen = ItemsBehavior.listen | ItemsBehavior.share;\n\n/** @private */\nexport class SharedType extends AnyType {\n    type : typeof Transactional\n\n     doInit( value, record : AttributesContainer, options : ConstructorOptions ){\n        const v = options.clone ? this.clone( value, record ) : (\n            value === void 0 ? this.defaultValue() : value\n        );\n\n        const x = this.transform( v, void 0, record, options );\n        this.handleChange( x, void 0, record, options );\n        return x;\n    }\n\n    doUpdate( value, record, options, nested : any[] ){ // Last to things can be wrapped to an object, either transaction or ad-hoc\n        const key = this.name, { attributes } = record; \n        const prev = attributes[ key ];\n        let update;\n\n        // This can be moved to transactional attribute. And chained with the rest.\n        if( update = this.canBeUpdated( prev, value, options ) ) { // todo - skip empty updates.\n            const nestedTransaction = prev._createTransaction( update, options );\n            if( nestedTransaction ){\n                if( nested ){\n                    nested.push( nestedTransaction );\n                }\n                else{\n                    nestedTransaction.commit( record );\n                }\n\n                if( this.propagateChanges ) return true;\n            }\n\n            return false;\n        }\n\n        const next = this.transform( value, prev, record, options );\n        attributes[ key ] = next;\n\n        if( this.isChanged( next, prev ) ) { // Primitives and nested comparison can be inlined.\n            // Do the rest of the job after assignment\n            this.handleChange( next, prev, record, options );\n\n            return true;\n        }\n\n        return false;\n    }\n\n    clone( value : Transactional, record : AttributesContainer ) : Transactional {\n        // References are not cloned.\n        if( !value || value._owner !== record ) return value;\n\n        // Implicitly created objects are cloned.\n        const clone = value.clone();\n        aquire( record, clone, this.name );\n        return clone;\n    }\n\n    // Do not serialize by default.\n    toJSON(){}\n\n    canBeUpdated( prev : Transactional, next : any, options : TransactionOptions ) : any {\n        // If an object already exists, and new value is of incompatible type, let object handle the update.\n        if( prev && next != null && !( next instanceof this.type ) ){\n            return next;\n        }\n    }\n\n    convert( next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) : Transactional {\n        if( next == null || next instanceof this.type ) return next;\n\n        // Convert type using implicitly created rtransactional object.\n        const implicitObject = new ( this.type as any )( next, options, shareAndListen );\n\n        // To prevent a leak, we need to take an ownership on it.\n        aquire( record, implicitObject, this.name );\n\n        return implicitObject;\n    }\n\n    // Refs are always valid.\n    validate( model, value, name ){}\n\n    // They are always created as null.\n    create() : Transactional {\n        return null;\n    }\n\n    // Listening to the change events\n    _handleChange( next : Transactional, prev : Transactional, record : AttributesContainer, options ){\n        if( prev ){\n            // If there was an implicitly created object, remove an ownership.\n            if( prev._owner === record ){\n                free( record, prev );\n                options.unset || prev.dispose();\n            }\n            else{\n                off( prev, prev._changeEventName, this._onChange, record );\n            }\n        }  \n \n        if( next ){\n            // No need to take an ownership for an implicit object - already done in convert or clone.\n            if( next._owner !== record ){\n                on( next, next._changeEventName, this._onChange, record );\n            }\n        } \n    }\n\n    dispose( record : AttributesContainer, value : Transactional ){\n        if( value ){\n            this.handleChange( void 0, value, record, {} );\n        }\n    }\n\n    _onChange : ( child : Transactional, options : TransactionOptions, initiator : Transactional ) => void \n\n    initialize( options ){\n        // Create change event handler which knows current attribute name. \n        const attribute = this;\n        this._onChange = this.propagateChanges ? function( child, options, initiator ){\n            this === initiator || this.forceAttributeChange( attribute.name, options );\n        } : ignore;\n\n        options.changeHandlers.unshift( this._handleChange );\n    }\n}\n\nfunction ignore(){}","import { tools as _, eventsApi } from '../../object-plus'\n\nexport * from './any'\nexport * from './owned'\nexport * from './date'\nexport * from './basic'\nexport * from './shared'\nexport * from './updates'\nexport * from './attrDef'\n\nimport { AnyType } from './any'\nimport { ConstructorsMixin, constructorsMixin } from './updates'\nimport { ChainableAttributeSpec } from './attrDef'\nimport { CompiledReference } from '../../traversable'\nimport { IOEndpoint } from '../../io-tools'\n\nexport interface RecordAttributesMixin extends ConstructorsMixin {\n    // Attributes descriptors\n    _attributes : AttributeDescriptors\n    _attributesArray : AnyType[]\n    \n    // Attribute's property descriptors\n    properties : PropertyDescriptorMap\n\n    // Event map for record's local events.\n    _localEvents? : eventsApi.EventMap,\n\n    _endpoints : { [ name : string ] : IOEndpoint }\n}\n\nexport interface AttributeDescriptors {\n    [ name : string ] : AnyType\n}\n\n// Create record mixin from the given record's attributes definition\nexport default function( attributesDefinition : object, baseClassAttributes : AttributeDescriptors ) : RecordAttributesMixin {\n    const myAttributes = _.transform( {} as AttributeDescriptors, attributesDefinition, createAttribute ),\n          allAttributes = _.defaults( {} as AttributeDescriptors, myAttributes, baseClassAttributes );\n\n    const ConstructorsMixin = constructorsMixin( allAttributes );\n\n    return {\n        ...ConstructorsMixin,\n        _attributes : new ConstructorsMixin.AttributesCopy( allAttributes ),\n        _attributesArray : Object.keys( allAttributes ).map( key => allAttributes[ key ] ),\n        properties : _.transform( <PropertyDescriptorMap>{}, myAttributes, x => x.createPropertyDescriptor() ),\n        ...localEventsMixin( myAttributes ),\n        _endpoints : _.transform( {}, allAttributes, attrDef => attrDef.options.endpoint )\n    }            \n}\n\n// Create attribute from the type spec.\nexport function createAttribute( spec : any, name : string ) : AnyType {\n    return AnyType.create( ChainableAttributeSpec.from( spec ).options, name );\n}\n\nexport function createSharedTypeSpec( Constructor : Function, Attribute : typeof AnyType ){\n    if( !Constructor.hasOwnProperty( 'shared' ) ){\n        Object.defineProperty( Constructor, 'shared', {\n            get(){\n                return new ChainableAttributeSpec({\n                    value : null,\n                    type : Constructor,\n                    _attribute : Attribute\n                });\n            }\n        });\n    }\n}\n\ninterface LocalEventsMixin {\n    _localEvents? : eventsApi.EventMap\n}\n\nfunction localEventsMixin( attrSpecs : AttributeDescriptors ) : LocalEventsMixin {\n    let _localEvents : eventsApi.EventMap;\n\n    for( var key in attrSpecs ){\n        const attribute = attrSpecs[ key ],\n            { _onChange } = attribute.options; \n\n        if( _onChange ){\n            _localEvents || ( _localEvents = new eventsApi.EventMap() );\n\n            _localEvents.addEvent( 'change:' + key,\n                typeof _onChange === 'string' ?\n                    createWatcherFromRef( _onChange, key ) : \n                    wrapWatcher( _onChange, key ) );\n        }\n    }\n\n    return _localEvents ? { _localEvents } : {};\n}\n\nfunction wrapWatcher( watcher, key ){\n    return function( record, value ){\n        watcher.call( record, value, key );\n    } \n}\n\nfunction createWatcherFromRef( ref : string, key : string ){\n    const { local, resolve, tail } = new CompiledReference( ref, true );\n    return local ?\n        function( record, value ){\n            record[ tail ]( value, key );\n        } :\n        function( record, value ){\n            resolve( record )[ tail ]( value, key );\n        }\n}","import { getOwnerEndpoint, startIO, IOOptions, IOEndpoint, IOPromise, IONode } from '../io-tools'\n\nexport interface IORecord extends IONode {\n    getEndpoint() : IOEndpoint\n    save( options? : IOOptions ) : IOPromise<this>\n    fetch( options? : IOOptions ) : IOPromise<this>\n    destroy( options? : IOOptions ) : IOPromise<this>\n    toJSON( options? : object ) : any\n    isNew() : boolean\n    id : string | number\n    set( json : object, options : object )\n}\n\nexport const IORecordMixin = {\n    save( this : IORecord, options : IOOptions = {} ){\n        const endpoint = this.getEndpoint(),\n              json = this.toJSON( options );\n\n        return startIO(\n            this,\n            this.isNew() ?\n                endpoint.create( json, options, this ) :\n                endpoint.update( this.id, json, options, this ),\n            options,\n\n            update => {\n                this.set( update, { parse : true, ...options } );\n            }\n        );\n    },\n\n    fetch( options : IOOptions = {} ){\n        return startIO(\n            this,\n            this.getEndpoint().read( this.id, options, this ),\n            options,\n\n            json => this.set( json, { parse : true, ...options } )\n        );\n    },\n\n    destroy( options : IOOptions = {} ){  \n        return startIO(\n            this,\n            this.getEndpoint().destroy( this.id, options, this ),\n            options,\n\n            () => {\n                const { collection } = this;\n                if( collection ){\n                    collection.remove( this, options );\n                }\n                else{\n                    this.dispose();\n                }\n\n                return this;\n            }\n        )\n    }\n}","/**\n * Record core implementing transactional updates.\n * The root of all definitions. \n */\n\nimport { tools, eventsApi, Mixable, definitions, mixins,  mixinRules, define } from '../object-plus'\n\nimport { CloneOptions, Transactional, TransactionalDefinition, Transaction, TransactionOptions, Owner } from '../transactions'\nimport { ChildrenErrors } from '../validation'\n\nimport { Collection } from '../collection'\n\nimport { AnyType, AggregatedType, setAttribute, UpdateRecordMixin, \n    AttributesValues, AttributesContainer,\n    ConstructorsMixin, AttributesConstructor, AttributesCopyConstructor } from './attributes'\n\nimport { IORecord, IORecordMixin } from './io-mixin'\nimport { IOPromise, IOEndpoint } from '../io-tools'\n\nconst { assign, isEmpty, log } = tools;\n\n/*******************************************************\n * Record core implementation\n */\n\nexport interface ConstructorOptions extends TransactionOptions{\n    clone? : boolean\n}\n\n// Client unique id counter\nlet _cidCounter : number = 0;\n\n/***************************************************************\n * Record Definition as accepted by Record.define( definition )\n */\nexport interface RecordDefinition extends TransactionalDefinition {\n    idAttribute? : string\n    attributes? : AttributesValues\n    collection? : object\n    Collection? : typeof Transactional\n}\n\n@define({\n    // Default client id prefix \n    cidPrefix : 'm',\n\n    // Name of the change event\n    _changeEventName : 'change',\n\n    // Default id attribute name\n    idAttribute : 'id'\n})\n@definitions({\n    defaults : mixinRules.merge,\n    attributes : mixinRules.merge,\n    collection : mixinRules.merge,\n    Collection : mixinRules.value,\n    idAttribute : mixinRules.protoValue\n})\nexport class Record extends Transactional implements IORecord, AttributesContainer {\n    // Hack\n    static onDefine( definition, BaseClass ){}\n\n    static Collection : typeof Collection;\n    static DefaultCollection : typeof Collection;\n\n    static from : ( collectionReference : any ) => any;\n    \n    static defaults( attrs : AttributesValues ) : typeof Record {\n        return <any>this.extend({ attributes : attrs });\n    }\n    \n    static attributes : AttributesValues\n\n    /********************\n     * IO Methods\n     */\n     _endpoints : { [ name : string ] : IOEndpoint }\n\n     // Save record\n     save( options? : object ) : IOPromise<this> { throw new Error( 'Implemented by mixin' ); }\n\n     // Destroy record\n     destroy( options? : object ) : IOPromise<this> { throw new Error( 'Implemented by mixin' ); }\n\n    /***********************************\n     * Core Members\n     */\n    // Previous attributes\n    _previousAttributes : {}\n\n    previousAttributes(){ return new this.AttributesCopy( this._previousAttributes ); } \n\n    // Current attributes    \n    attributes : AttributesValues\n\n    // Polymorphic accessor for aggregated attribute's canBeUpdated().\n    get __inner_state__(){ return this.attributes; }\n\n    // Lazily evaluated changed attributes hash\n    _changedAttributes : AttributesValues\n\n    get changed(){\n        let changed = this._changedAttributes;\n\n        if( !changed ){\n            const prev = this._previousAttributes;\n            changed = {};\n\n            const { _attributes, attributes } = this;\n\n            for( let attr of this._attributesArray ){\n                const key = attr.name,\n                    value = attributes[ key ];\n\n                if( attr.isChanged( value, prev[ key ] ) ){\n                    changed[ key ] = value;\n                }\n            }\n\n            this._changedAttributes = changed;\n        }\n\n        return changed;    \n    }\n\n    changedAttributes( diff? : {} ) : boolean | {} {\n        if( !diff ) return this.hasChanged() ? assign( {}, this.changed ) : false;\n\n        var val, changed : {} | boolean = false,\n            old          = this._transaction ? this._previousAttributes : this.attributes,\n            attrSpecs    = this._attributes;\n\n        for( var attr in diff ){\n            if( !attrSpecs[ attr ].isChanged( old[ attr ], ( val = diff[ attr ] ) ) ) continue;\n            (changed || (changed = {}))[ attr ] = val;\n        }\n\n        return changed;        \n    }\n\n    hasChanged( key? : string ) : boolean {\n        const { _previousAttributes } = this;\n        if( !_previousAttributes ) return false;\n\n        return key ?\n                this._attributes[ key ].isChanged( this.attributes[ key ], _previousAttributes[ key ] ) :\n                !isEmpty( this.changed );\n    }\n\n    previous( key : string ) : any {\n        if( key ){\n            const { _previousAttributes } = this;\n            if( _previousAttributes ) return _previousAttributes[ key ];\n        }\n        \n        return null;\n    }\n\n    isNew() : boolean {\n        return this.id == null;\n    }\n\n    has( key : string ) : boolean {\n        return this[ key ] != void 0;\n    }\n\n    // Return attribute value, setting an attribute to undefined.\n    // TODO: If attribute was aggregated, don't dispose it.\n    unset( key : string, options? ) : any {\n        const value = this[ key ];\n        this.set({ [ key ] : void 0 }, { unset : true, ...options });\n        return value;\n    }\n\n    // Undocumented. Move to NestedTypes?\n    clear( options? ) : this {\n        const nullify = options && options.nullify;\n\n        this.transaction( () =>{\n            this.forEachAttr( this.attributes, ( value, key ) => this[ key ] = nullify ? null : void 0 );\n        }, options );\n\n        return this;\n    }\n\n    // Returns Record owner skipping collections. TODO: Move out\n    getOwner() : Owner {\n        const owner : any = this._owner;\n\n        // If there are no key, owner must be transactional object, and it's the collection.\n        // We don't expect that collection can be the member of collection, so we're skipping just one level up. An optimization.\n        return this._ownerKey ? owner : owner && owner._owner;\n    }\n\n    /***********************************\n     * Identity managements\n     */\n\n    // Id attribute name ('id' by default)\n    idAttribute : string;\n\n    // Fixed 'id' property pointing to id attribute\n    get id() : string | number { return this.attributes[ this.idAttribute ]; }\n    set id( x : string | number ){ setAttribute( this, this.idAttribute, x ); }\n\n    /***********************************\n     * Dynamically compiled stuff\n     */\n\n    // Attributes specifications \n    _attributes : { [ key : string ] : AnyType }\n    _attributesArray : AnyType[]\n\n    // Attributes object copy constructor\n    Attributes : AttributesConstructor\n    AttributesCopy : AttributesCopyConstructor\n\n    // forEach function for traversing through attributes, with protective default implementation\n    // Overriden by dynamically compiled loop unrolled function in define.ts\n    forEachAttr( attrs : {}, iteratee : ( value : any, key? : string, spec? : AnyType ) => void ) : void {\n        const { _attributes } = this;\n        let unknown : string[];\n\n        for( let name in attrs ){\n            const spec = _attributes[ name ];\n\n            if( spec ){\n                iteratee( attrs[ name ], name, spec );\n            }\n            else{\n                unknown || ( unknown = [] );\n                unknown.push( `'${ name }'` );\n            }\n        }\n\n        if( unknown ){\n            this._log( 'warn', `attributes ${ unknown.join(', ')} are not defined`,{\n                attributes : attrs\n            } );\n        }\n    }\n\n    each( iteratee : ( value? : any, key? : string ) => void, context? : any ){\n        const fun = context !== void 0 ? ( v, k ) => iteratee.call( context, v, k ) : iteratee,\n            { attributes } = this;\n\n        for( const key in this.attributes ){\n            const value = attributes[ key ];\n            if( value !== void 0 ) fun( value, key );\n        }\n    }\n\n    // Get array of attribute keys (Record) or record ids (Collection) \n    keys() : string[] {\n        const keys : string[] = [];\n\n        this.each( ( value, key ) => value === void 0 || keys.push( key ) );\n\n        return keys;\n    }\n\n    // Get array of attribute values (Record) or records (Collection)\n    values() : any[] {\n        return this.map( value => value );\n    }\n\n    // Create record default values, optionally augmenting given values.\n    defaults( values = {} ){\n        const defaults = {},\n            { _attributesArray } = this;\n\n        for( let attr of _attributesArray ){\n            const key = attr.name,\n            value = values[ key ];\n\n            defaults[ key ] = value === void 0 ? attr.defaultValue() : value;\n        }\n\n        return defaults;\n    }\n\n    /***************************************************\n     * Record construction\n     */\n    // Create record, optionally setting an owner\n    constructor( a_values? : {}, a_options? : ConstructorOptions ){\n        super( _cidCounter++ );\n        this.attributes = {};\n        \n        const options = a_options || {},\n              values = ( options.parse ? this.parse( a_values, options ) :  a_values ) || {};\n\n        if( log.level > 1 ) typeCheck( this, values );\n\n        this._previousAttributes = this.attributes = new this.Attributes( this, values, options );\n\n        this.initialize( a_values, a_options );\n\n        if( this._localEvents ) this._localEvents.subscribe( this, this );\n    }\n\n    // Initialization callback, to be overriden by the subclasses \n    initialize( values?, options? ){}\n\n    // Deeply clone record, optionally setting new owner.\n    clone( options : CloneOptions = {} ) : this {\n        const copy : this = new (<any>this.constructor)( this.attributes, { clone : true } );\n        \n        if( options.pinStore ) copy._defaultStore = this.getStore();\n\n        return copy;\n    }\n\n    // Deprecated, every clone is the deep one now.\n    deepClone() : this { return this.clone() };\n\n    // Validate attributes.\n    _validateNested( errors : ChildrenErrors ) : number {\n        var length    = 0;\n\n        this.forEachAttr( this.attributes, ( value, name, attribute ) => {\n            const error = attribute.validate( this, value, name );\n\n            if( error ){\n                errors[ name ] = error;\n                length++;\n            }\n        } );\n\n        return length;\n    }\n\n    // Get attribute by key\n    get( key : string ) : any {\n        return this[ key ];\n    }\n\n    /**\n     * Serialization control\n     */\n\n    // Default record-level serializer, to be overriden by subclasses \n    toJSON( options? : object ) : any {\n        const json = {};\n\n        this.forEachAttr( this.attributes, ( value, key : string, { toJSON } ) =>{\n            // If attribute serialization is not disabled, and its value is not undefined...\n            if( value !== void 0 ){\n                // ...serialize it according to its spec.\n                const asJson = toJSON.call( this, value, key, options );\n\n                // ...skipping undefined values. Such an attributes are excluded.\n                if( asJson !== void 0 ) json[ key ] = asJson; \n            }\n        });\n\n        return json;\n    }\n    \n    // Default record-level parser, to be overriden by the subclasses.\n    parse( data, options? : TransactionOptions ){\n        return data;\n    }\n\n    // DEPRECATED: Attributes-level parse. Is moved to attribute descriptors.\n    _parse( data ){ return data; }\n\n    /**\n     * Transactional control\n     */\n\n    deepSet( name : string, value : any, options? ){\n        // Operation might involve series of nested object updates, thus it's wrapped in transaction.\n        this.transaction( () => {\n            const path  = name.split( '.' ),\n                l     = path.length - 1,\n                attr  = path[ l ];\n\n            let model = this;\n\n            // Locate the model, traversing the path.\n            for( let i = 0; i < l; i++ ){\n                const key = path[ i ];\n\n                // There might be collections in path, so use `get`.\n                let next    = model.get ? model.get( key ) : model[ key ];\n\n                // Create models, if they are not exist.\n                if( !next ){\n                    const attrSpecs = model._attributes;\n                    if( attrSpecs ){\n                        // If current object is model, create default attribute\n                        var newModel = attrSpecs[ key ].create();\n\n                        // If created object is model, nullify attributes when requested\n                        if( options && options.nullify && newModel._attributes ){\n                            newModel.clear( options );\n                        }\n\n                        model[ key ] = next = newModel;\n                    }\n                    // Silently fail in other case.\n                    else return;\n                }\n                \n                model = next;\n            }\n\n            // Set model attribute.\n            if( model.set ){\n                model.set({ [ attr ] : value }, options );\n            }\n            else{\n                model[ attr ] = value;\n            }\n        });\n\n        return this;\n    }\n            \n    // Returns owner without the key (usually it's collection)\n    get collection() : any {\n        return this._ownerKey ? null : this._owner;\n    }\n\n    // Dispose object and all childrens\n    dispose(){\n        if( this._disposed ) return;\n        \n        this.forEachAttr( this.attributes, ( value, key, attribute ) => {\n            attribute.dispose( this, value );\n        });\n\n        super.dispose();\n    }\n\n    _log( level : tools.LogLevel, text : string, props : object ) : void {\n        tools.log( level, '[Record] ' + text, {\n            'Record' : this,\n            'Attributes definition:' : this._attributes,\n            ...props\n        });\n    }\n\n    getClassName() : string {\n        return super.getClassName() || 'Record';\n    }\n\n    // Dummies to \n    _createTransaction( values : object, options : TransactionOptions ) : Transaction { return void 0; }\n    // Simulate attribute change \n    forceAttributeChange : ( key : string, options : TransactionOptions ) => void\n    _onChildrenChange : ( child : Transactional, options : TransactionOptions ) => void\n};\n\nassign( Record.prototype, UpdateRecordMixin, IORecordMixin );\n\n/***********************************************\n * Helper functions\n */\n\nclass BaseRecordAttributes {\n    id : string | number\n\n    constructor( record : Record, x : AttributesValues, options : TransactionOptions ) {\n        this.id = x.id;\n    }\n}\n\nRecord.prototype.Attributes = BaseRecordAttributes;\n\nclass BaseRecordAttributesCopy {\n    id : string | number\n\n    constructor( x : AttributesValues ) {\n        this.id = x.id;\n    }\n}\n\nRecord.prototype.AttributesCopy = BaseRecordAttributesCopy;\n\nconst IdAttribute = AnyType.create({ value : void 0 }, 'id' );\nRecord.prototype._attributes = { id : IdAttribute };\nRecord.prototype._attributesArray = [ IdAttribute ];\nRecord._attribute = AggregatedType;\n\nimport { shouldBeAnObject } from './attributes'\n\nfunction typeCheck( record : Record, values : object ){\n    if( shouldBeAnObject( record, values ) ){\n        const { _attributes } = record;\n        let unknown : string[];\n\n        for( let name in values ){\n            if( !_attributes[ name ] ){\n                unknown || ( unknown = [] );\n                unknown.push( `'${ name }'` );\n            }\n        }\n\n        if( unknown ){\n            record._log( 'warn', `undefined attributes ${ unknown.join(', ')} are ignored.`, { values } );\n        }\n    }\n}","import { Record, RecordDefinition } from './record'\nimport { Mixable, tools, predefine, define, MixinsState } from '../object-plus'\nimport compile, { ChainableAttributeSpec } from './attributes'\nimport { Transactional } from '../transactions'\n\nimport { createSharedTypeSpec, AggregatedType, MSDateType, TimestampType, NumericType, SharedType } from './attributes'\n\nexport * from './attributes'\nexport { Record }\n\nconst { assign, defaults, omit, getBaseClass } = tools;\n\nRecord.onExtend = function( this : typeof Record, BaseClass : typeof Record ){\n    Transactional.onExtend.call( this, BaseClass );\n\n    // Create the default collection\n    const Class = this;\n\n    @predefine class DefaultCollection extends BaseClass.Collection<any> {\n        static model = Class;\n    }\n\n    this.DefaultCollection = DefaultCollection;\n\n    // If there are no collection defined in statics, use the default collection.\n    // It will appear in onDefine's definition, overriding all other settings.\n    if( Class.Collection === BaseClass.Collection ){\n        this.Collection = DefaultCollection;\n    }\n\n    // Create Class.shared modifier\n    createSharedTypeSpec( this, SharedType );\n}\n\nRecord.onDefine = function( definition : RecordDefinition, BaseClass : typeof Record ){\n    const baseProto : Record = BaseClass.prototype;\n\n    // Compile attributes spec, creating definition mixin.\n    const { properties, _localEvents, ...dynamicMixin } = compile( this.attributes = getAttributes( definition ), baseProto._attributes );\n    assign( this.prototype, dynamicMixin );\n    \n    definition.properties = defaults( definition.properties || {}, properties );\n    definition._localEvents = _localEvents;\n    \n    Transactional.onDefine.call( this, definition, BaseClass );\n\n    // Finalize the definition of the default collection.\n    this.DefaultCollection.define( definition.collection || {} );\n\n    // assign collection from the definition.\n    this.Collection = definition.Collection;\n    this.Collection.prototype.model = this;\n\n    if( definition.endpoint ) this.Collection.prototype._endpoint = definition.endpoint;    \n}\n\nRecord._attribute = AggregatedType;\ncreateSharedTypeSpec( Record, SharedType );\n\nfunction getAttributes({ defaults, attributes, idAttribute } : RecordDefinition ) {\n    const definition = attributes || defaults || {};\n    \n    // If there is an undeclared idAttribute, add its definition as untyped generic attribute.\n    if( idAttribute && !( idAttribute in definition ) ){\n        definition[ idAttribute ] = void 0;\n    }\n\n    return definition;\n}\n\ndeclare var Reflect;\n\nexport function attr( proto : object, attrName : string ) : void;\nexport function attr( spec : any ) : PropertyDecorator;\nexport function attr( proto, attrName? : string ) : any {\n    if( attrName ){\n        // Called without the spec. Extract the type.\n        if( typeof Reflect !== 'undefined' && Reflect.getMetadata ){\n            Reflect\n                .getMetadata( \"design:type\", proto, attrName )\n                .asProp( proto, attrName );\n        }\n        else{\n            proto._log( 'error', 'Add import \"reflect-metadata\"; as the first line of your app.' );\n        }\n    }\n    else{\n        return ChainableAttributeSpec.from( proto ).asProp;\n    }\n}\n\nexport function prop( spec ) : any {\n    return spec.asProp;\n}","import { Record } from '../record'\nimport { Owner, Transaction, ItemsBehavior,\n        TransactionOptions, Transactional, transactionApi } from '../transactions'\n\nimport { eventsApi, tools } from '../object-plus'\n\nconst { EventMap, trigger2, trigger3, on, off } = eventsApi,\n      { commit, markAsDirty } = transactionApi,\n      _aquire = transactionApi.aquire, _free = transactionApi.free;\n\n/** @private */\nexport interface CollectionCore extends Transactional, Owner {\n    _byId : IdIndex\n    models : Record[]\n    model : typeof Record\n    idAttribute : string // TODO: Refactor inconsistent idAttribute usage\n    _comparator : Comparator\n    get( objOrId : string | Record | Object ) : Record    \n    _itemEvents? : eventsApi.EventMap\n    _shared : number\n    _aggregationError : Record[]\n\n    _log( level : string, text : string, value : any ) : void\n}\n\n// Collection's manipulation methods elements\nexport type Elements = ( Object | Record )[];\n\nexport interface CollectionOptions extends TransactionOptions {\n    sort? : boolean\n}\n\nexport type Comparator = ( a : Record, b : Record ) => number;  \n\n/** @private */\nexport function dispose( collection : CollectionCore ) : Record[]{\n    const { models } = collection;\n\n    collection.models = [];\n    collection._byId  = {};\n\n    freeAll( collection, models );\n    return models;\n}\n\n/** @private */\nexport function convertAndAquire( collection : CollectionCore, attrs : {} | Record, options : CollectionOptions ){\n    const { model } = collection;\n    \n    let record : Record;\n\n    if( collection._shared ){\n        record = attrs instanceof model ? attrs : <Record>model.create( attrs, options );\n\n        if( collection._shared & ItemsBehavior.listen ){\n            on( record, record._changeEventName, collection._onChildrenChange, collection );\n        }\n    }\n    else{\n        record = attrs instanceof model ? ( options.merge ? attrs.clone() : attrs ) : <Record>model.create( attrs, options );\n\n        if( !_aquire( collection, record ) ){\n            const errors = collection._aggregationError || ( collection._aggregationError = [] );\n            errors.push( record );\n        }\n    }    \n\n    // Subscribe for events...\n    const { _itemEvents } = collection;\n    _itemEvents && _itemEvents.subscribe( collection, record );\n\n    return record;\n}\n\n/** @private */\nexport function free( owner : CollectionCore, child : Record, unset? : boolean ) : void {\n    if( owner._shared ){\n        if( owner._shared & ItemsBehavior.listen ){\n            off( child, child._changeEventName, owner._onChildrenChange, owner );\n        }\n    }\n    else{\n        _free( owner, child );\n        unset || child.dispose();\n    }\n\n    const { _itemEvents } = owner;\n    _itemEvents && _itemEvents.unsubscribe( owner, child );\n}\n\n/** @private */\nexport function freeAll( collection : CollectionCore, children : Record[] ) : Record[] {\n    for( let child of children ){\n        free( collection, child );\n    }\n\n    return children;\n}\n\n/**\n * Silently sort collection, if its required. Returns true if sort happened.\n * @private\n */   \nexport function sortElements( collection : CollectionCore, options : CollectionOptions ) : boolean {\n    let { _comparator } = collection;\n    if( _comparator && options.sort !== false ){\n        collection.models.sort( _comparator );\n        return true;\n    }\n\n    return false;\n}\n\n/**********************************\n * Collection Index\n * @private \n */\nexport interface IdIndex {\n    [ id : string ] : Record\n}\n\n/** @private Add record */ \nexport function addIndex( index : IdIndex, model : Record ) : void {\n    index[ model.cid ] = model;\n    var id             = model.id;\n    \n    if( id || id === 0 ){\n        index[ id ] = model;\n    }\n}\n\n/** @private Remove record */ \nexport function removeIndex( index : IdIndex, model : Record ) : void {\n    delete index[ model.cid ];\n    var id = model.id;\n    if( id || id === 0 ){\n        delete index[ id ];\n    }\n}\n\nexport function updateIndex( index : IdIndex, model : Record ){\n    delete index[ model.previous( model.idAttribute ) ];\n\n    const { id } = model;\n    id == null || ( index[ id ] = model );\n}\n\n/***\n * In Collections, transactions appears only when\n * add remove or change events might be emitted.\n * reset doesn't require transaction.\n * \n * Transaction holds information regarding events, and knows how to emit them.\n * \n * Two major optimization cases.\n * 1) Population of an empty collection\n * 2) Update of the collection (no or little changes) - it's crucial to reject empty transactions.\n */\n\n\n// Transaction class. Implements two-phase transactions on object's tree.\n/** @private */ \nexport class CollectionTransaction implements Transaction {\n    // open transaction\n    constructor(    public object : CollectionCore,\n                    public isRoot : boolean,\n                    public added : Record[],\n                    public removed : Record[],\n                    public nested : Transaction[],\n                    public sorted : boolean ){}\n\n    // commit transaction\n    commit( initiator? : Transactional ){\n        const { nested, object } = this,\n              { _isDirty } = object;\n\n        // Commit all nested transactions...\n        for( let transaction of nested ){\n            transaction.commit( object );\n        }\n\n        if( object._aggregationError ){\n            logAggregationError( object );\n        }\n\n        // Just trigger 'change' on collection, it must be already triggered for models during nested commits.\n        // ??? TODO: do it in nested transactions loop? This way appears to be more correct. \n        for( let transaction of nested ){\n            trigger2( object, 'change', transaction.object, _isDirty );\n        }\n\n        // Notify listeners on attribute changes...\n        const { added, removed } = this;\n\n        // Trigger `add` events for both model and collection.\n        for( let record of added ){\n            trigger3( record, 'add', record, object, _isDirty );\n            trigger3( object, 'add', record, object, _isDirty );\n        }\n\n        // Trigger `remove` events for both model and collection.\n        for( let record of removed ){\n            trigger3( record, 'remove', record, object, _isDirty );\n            trigger3( object, 'remove', record, object, _isDirty );\n        }\n\n        if( this.sorted ){\n            trigger2( object, 'sort', object, _isDirty );\n        }\n\n        if( added.length || removed.length ){\n            trigger2( object, 'update', object, _isDirty );\n        }\n\n        this.isRoot && commit( object, initiator );\n    }\n}\n\nexport function logAggregationError( collection : CollectionCore ){\n    collection._log( 'error', 'added records already have an owner', collection._aggregationError );\n    collection._aggregationError = void 0;\n}","import { Transaction, transactionApi } from '../transactions'\nimport { CollectionTransaction, logAggregationError, sortElements, convertAndAquire, free, CollectionOptions, addIndex, updateIndex, CollectionCore } from './commons'\nimport { Record } from '../record'\n\nconst { begin, commit, markAsDirty } = transactionApi;\n\nexport interface AddOptions extends CollectionOptions {\n    at? : number \n}\n\n/** @private */\nexport function addTransaction( collection : CollectionCore, items : any[], options : AddOptions, merge? : boolean ){\n    const isRoot = begin( collection ),\n          nested : Transaction[]= [];\n\n    var added = appendElements( collection, items, nested, options, merge );\n\n    if( added.length || nested.length ){\n        let needSort = sortOrMoveElements( collection, added, options );\n        if( markAsDirty( collection, options ) ){\n            return new CollectionTransaction( collection, isRoot, added, [], nested, needSort );\n        }\n\n        if( collection._aggregationError ) logAggregationError( collection );\n    }\n\n    // No changes...\n    isRoot && commit( collection );\n};\n\n// Handle sort or insert at options for add operation. Reurns true if sort happened.\n/** @private */ \nfunction sortOrMoveElements( collection : CollectionCore, added : Record[], options : AddOptions ) : boolean {\n    let at = options.at;\n\n    // if `at` option is given, it overrides sorting option...\n    if( at != null ){\n        // Take an original collection's length. \n        const length = collection.models.length - added.length;\n\n        // Crazy Backbone rules about `at` index. I don't know what that guys smoke.\n        at = Number( at );\n        if( at < 0 ) at += length + 1;\n        if( at < 0 ) at = 0;\n        if( at > length ) at = length;\n\n        // Move added elements to desired position. In place.\n        moveElements( collection.models, at, added );\n        return false;\n    }\n\n    return sortElements( collection, options );\n}\n\n/** @private */\nfunction moveElements( source : any[], at : number, added : any[] ) : void {\n    for( var j = source.length - 1, i = j - added.length; i >= at; i--, j-- ){\n        source[ j ] = source[ i ];\n    }\n\n    for( i = 0, j = at; i < added.length; i++, j++ ){\n        source[ j ] = added[ i ];\n    }\n}\n\n// append data to model and index\n/** @private */\nfunction appendElements( collection : CollectionCore, a_items : any[], nested : Transaction[], a_options : AddOptions, forceMerge : boolean ){\n    var { _byId, models } = collection,\n        merge       = ( forceMerge || a_options.merge ) && !collection._shared,\n        parse       = a_options.parse,\n        idAttribute = collection.model.prototype.idAttribute,\n        prevLength = models.length;\n\n    for( const item of a_items ){\n        let model = item ? _byId[ item[ idAttribute ] ] || _byId[ item.cid ] : null;\n\n        if( model ){\n            if( merge && item !== model ){\n                var attrs = item.attributes || item;\n                const transaction = model._createTransaction( attrs, a_options );\n                transaction && nested.push( transaction );\n\n                if( model.hasChanged( idAttribute ) ){\n                    updateIndex( _byId, model );\n                }\n            }\n        }\n        else{\n            model = convertAndAquire( collection, item, a_options );\n            models.push( model );\n            addIndex( _byId, model );\n        }\n    }\n\n    return models.slice( prevLength );\n}\n","import { Transaction, transactionApi } from '../transactions'\nimport { CollectionTransaction, logAggregationError, IdIndex, convertAndAquire, free, sortElements, CollectionOptions, addIndex, CollectionCore, Elements, freeAll } from './commons'\nimport { Record } from '../record'\n\nconst { begin, commit, markAsDirty } = transactionApi;\n\n/** @private */\nconst silentOptions = { silent : true };\n\n/** @private */\nexport function emptySetTransaction( collection : CollectionCore, items : Elements, options : CollectionOptions, silent? : boolean ){\n    const isRoot = begin( collection );\n\n    const added = _reallocateEmpty( collection, items, options );\n\n    if( added.length ){\n        const needSort = sortElements( collection, options );\n\n        if( markAsDirty( collection, silent ? silentOptions : options ) ){\n            // 'added' is the reference to this.models. Need to copy it.\n            return new CollectionTransaction( collection, isRoot, added.slice(), [], [], needSort );\n        }\n\n        if( collection._aggregationError ) logAggregationError( collection );\n    }\n\n    // No changes...\n    isRoot && commit( collection );\n};\n\n/** @private */\nexport function setTransaction( collection, items, options ){\n    const isRoot = begin( collection ),\n          nested = [];\n\n    var previous = collection.models,\n        added    = _reallocate( collection, items, nested, options );\n\n    const reusedCount = collection.models.length - added.length,\n          removed = reusedCount < previous.length ? (\n                        reusedCount ? _garbageCollect( collection, previous ) :\n                                        freeAll( collection, previous )\n                    ) : [];                    \n    \n    const addedOrChanged = nested.length || added.length,\n          // As we are reallocating models array, it needs to be sorted even if there are no changes.\n          sorted = ( sortElements( collection, options ) && addedOrChanged ) || added.length || options.sorted;\n\n    if( addedOrChanged || removed.length || sorted ){\n        if( markAsDirty( collection, options ) ){ \n            return new CollectionTransaction( collection, isRoot, added, removed, nested, sorted );\n        }\n\n        if( collection._aggregationError ) logAggregationError( collection );\n    }\n\n    isRoot && commit( collection );\n};\n\n// Remove references to all previous elements, which are not present in collection.\n// Returns an array with removed elements.\n/** @private */\nfunction _garbageCollect( collection : CollectionCore, previous : Record[] ) : Record[]{\n    const { _byId }  = collection,\n          removed = [];\n\n    // Filter out removed models and remove them from the index...\n    for( let record of previous ){\n        if( !_byId[ record.cid ] ){\n            removed.push( record );\n            free( collection, record );\n        }\n    }\n\n    return removed;\n}\n\n// reallocate model and index\n/** @private */\nfunction _reallocate( collection : CollectionCore, source : any[], nested : Transaction[], options ){\n    var models      = Array( source.length ),\n        _byId : IdIndex = {},\n        merge       = ( options.merge == null ? true : options.merge ) && !collection._shared,\n        _prevById   = collection._byId,\n        prevModels  = collection.models, \n        idAttribute = collection.model.prototype.idAttribute,\n        toAdd       = [],\n        orderKept   = true;\n\n    // for each item in source set...\n    for( var i = 0, j = 0; i < source.length; i++ ){\n        var item  = source[ i ],\n            model : Record = null;\n\n        if( item ){\n            var id  = item[ idAttribute ],\n                cid = item.cid;\n\n            if( _byId[ id ] || _byId[ cid ] ) continue;\n\n            model = _prevById[ id ] || _prevById[ cid ];\n        }\n\n        if( model ){\n            if( merge && item !== model ){\n                if( orderKept && prevModels[ j ] !== model ) orderKept = false;\n\n                var attrs = item.attributes || item;\n                const transaction = model._createTransaction( attrs, options );\n                transaction && nested.push( transaction );\n            }\n        }\n        else{\n            model = convertAndAquire( collection, item, options );\n            toAdd.push( model );\n        }\n\n        models[ j++ ] = model;\n        addIndex( _byId, model );\n    }\n\n    models.length = j;\n    collection.models   = models;\n    collection._byId    = _byId;\n\n    if( !orderKept ) options.sorted = true;\n\n    return toAdd;\n}\n\n/** @private */\nfunction _reallocateEmpty( self, source, options ){\n    var len         = source ? source.length : 0,\n        models      = Array( len ),\n        _byId : IdIndex = {},\n        idAttribute = self.model.prototype.idAttribute;\n\n    for( var i = 0, j = 0; i < len; i++ ){\n        var src = source[ i ];\n\n        if( src && ( _byId[ src[ idAttribute ] ] || _byId[ src.cid ] ) ){\n            continue;\n        }\n\n        var model = convertAndAquire( self, src, options );\n        models[ j++ ] = model;\n        addIndex( _byId, model );\n    }\n\n    models.length = j;\n    self._byId    = _byId;\n\n    return self.models = models;\n}","/*************\n * Remove items from collections.\n * \n * Cannot be a part of two-phase transaction on object tree.\n * Can be executed in the scope of ad-hoc transaction or from the trigger, though.\n *\n * Implemented with low-level API. \n * Most frequent operation - single element remove. Thus, it have the fast-path.\n */\n\nimport { Record } from '../record'\nimport { free, CollectionCore, CollectionTransaction, removeIndex } from './commons'\nimport { eventsApi } from '../object-plus'\nimport { TransactionOptions, transactionApi } from '../transactions' \n\nconst { trigger2, trigger3 } = eventsApi,\n    { markAsDirty, begin, commit } = transactionApi;\n\n/** @private */\nexport function removeOne( collection : CollectionCore, el : Record | {} | string, options : TransactionOptions ) : Record {\n    var model : Record = collection.get( el );\n\n    if( model ){\n        const isRoot = begin( collection ),\n              models = collection.models;\n\n        // Remove model form the collection. \n        models.splice( models.indexOf( model ), 1 );\n        removeIndex( collection._byId, model );\n        \n        // Mark transaction as dirty. \n        const notify = markAsDirty( collection, options );\n\n        // Send out events.\n        if( notify ){\n            trigger3( model, 'remove', model, collection, options );\n            trigger3( collection, 'remove', model, collection, options );\n        } \n\n        free( collection, model, options.unset );\n\n        notify && trigger2( collection, 'update', collection, options );\n\n        // Commit transaction.\n        isRoot && commit( collection );\n\n        return model;\n    }\n};\n\n/** Optimized for removing many elements\n * 1. Remove elements from the index, checking for duplicates\n * 2. Create new models array matching index\n * 3. Send notifications and remove references\n */\n\n/** @private */\nexport function removeMany( collection : CollectionCore, toRemove : any[], options ){\n    const removed = _removeFromIndex( collection, toRemove, options.unset );\n    if( removed.length ){\n        const isRoot = begin( collection );\n\n        _reallocate( collection, removed.length );\n\n        if( markAsDirty( collection, options ) ){\n            const transaction = new CollectionTransaction( collection, isRoot, [], removed, [], false );\n            transaction.commit();\n        }\n        else{\n            // Commit transaction.\n            isRoot && commit( collection );\n        }\n    }\n\n    return removed;\n};\n\n// remove models from the index...\n/** @private */\nfunction _removeFromIndex( collection, toRemove, unset : boolean ){\n    var removed = Array( toRemove.length ),\n        _byId   = collection._byId;\n\n    for( var i = 0, j = 0; i < toRemove.length; i++ ){\n        var model = collection.get( toRemove[ i ] );\n        if( model ){\n            removed[ j++ ] = model;\n            removeIndex( _byId, model );\n            free( collection, model, unset );\n        }\n    }\n\n    removed.length = j;\n\n    return removed;\n}\n\n// Allocate new models array removing models not present in the index.\n/** @private */\nfunction _reallocate( collection, removed ){\n    var prev   = collection.models,\n        models = collection.models = Array( prev.length - removed ),\n        _byId = collection._byId;\n\n    for( var i = 0, j = 0; i < prev.length; i++ ){\n        var model = prev[ i ];\n\n        if( _byId[ model.cid ] ){\n            models[ j++ ] = model;\n        }\n    }\n\n    models.length = j;\n}","import { define, tools, eventsApi, EventMap, definitions, mixinRules, EventsDefinition, Mixable } from '../object-plus'\nimport { ItemsBehavior, transactionApi, Transactional, CloneOptions, Transaction, TransactionOptions, TransactionalDefinition, Owner } from '../transactions'\nimport { Record, SharedType, AggregatedType, createSharedTypeSpec } from '../record'\n\nimport { IdIndex, free, sortElements, dispose, Elements, CollectionCore, addIndex, removeIndex, updateIndex, Comparator, CollectionTransaction } from './commons'\nimport { addTransaction, AddOptions } from './add'\nimport { setTransaction, emptySetTransaction } from './set'\nimport { removeOne, removeMany } from './remove'\nimport { IOPromise, startIO } from '../io-tools'\n\nconst { trigger2, on, off } = eventsApi,\n    { begin, commit, markAsDirty } = transactionApi,\n    { omit, log, assign, defaults, assignToClassProto } = tools;\n\nlet _count = 0;\n\nexport type GenericComparator = string | ( ( x : Record ) => number ) | ( ( a : Record, b : Record ) => number ); \n\nexport interface CollectionOptions extends TransactionOptions {\n    comparator? : GenericComparator\n    model? : typeof Record\n}\n\nexport type Predicate<R> = ( val : R, key : number ) => boolean | object;\n\nexport interface CollectionDefinition extends TransactionalDefinition {\n    model? : typeof Record,\n    itemEvents? : EventsDefinition\n    _itemEvents? : EventMap\n}\n\nconst slice = Array.prototype.slice;\n\nclass CollectionRefsType extends SharedType {\n    static defaultValue = [];\n}\n\n@define({\n    // Default client id prefix \n    cidPrefix : 'c',\n    model : Record,\n    _changeEventName : 'changes',\n    _aggregationError : null\n})\n@definitions({\n    comparator : mixinRules.value,\n    model : mixinRules.protoValue,\n    itemEvents : mixinRules.merge\n})\nexport class Collection< R extends Record = Record> extends Transactional implements CollectionCore {\n    _shared : number\n    _aggregationError : R[]\n\n    static Subset : typeof Collection\n    static Refs : typeof Collection\n    static _SubsetOf : typeof Collection\n    \n    createSubset( models : ElementsArg, options ){\n        const SubsetOf = (<any>this.constructor).subsetOf( this ).options.type,\n            subset   = new SubsetOf( models, options );\n            \n        subset.resolve( this );\n        return subset;\n    }\n\n    static onExtend( BaseClass : typeof Transactional ){\n        // Cached subset collection must not be inherited.\n        const Ctor = this;\n        this._SubsetOf = null;\n\n        function RefsCollection( a, b, listen? ){\n            Ctor.call( this, a, b, ItemsBehavior.share | ( listen ? ItemsBehavior.listen : 0 ) );\n        }\n\n        Mixable.mixins.populate( RefsCollection );\n        \n        RefsCollection.prototype = this.prototype;\n        RefsCollection._attribute = CollectionRefsType;\n\n        this.Refs = this.Subset = <any>RefsCollection;\n\n        Transactional.onExtend.call( this, BaseClass );\n        createSharedTypeSpec( this, SharedType );\n    }\n    \n    static onDefine( definition : CollectionDefinition, BaseClass : any ){\n        if( definition.itemEvents ){\n            const eventsMap = new EventMap( BaseClass.prototype._itemEvents );\n            eventsMap.addEventsMap( definition.itemEvents );\n            this.prototype._itemEvents = eventsMap;\n        }\n\n        if( definition.comparator !== void 0 ) this.prototype.comparator = definition.comparator;\n\n        Transactional.onDefine.call( this, definition );\n    }\n\n    static subsetOf : ( collectionReference : any ) => any;\n    \n    _itemEvents : EventMap\n\n    /***********************************\n     * Core Members\n     */\n    // Array of the records\n    models : R[]\n\n    // Polymorphic accessor for aggregated attribute's canBeUpdated().\n    get __inner_state__(){ return this.models; }\n\n    // Index by id and cid\n    _byId : { [ id : string ] : R }\n\n    set comparator( x : GenericComparator ){\n        let compare;\n\n        switch( typeof x ){\n            case 'string' :\n                this._comparator = ( a, b ) => {\n                    const aa = a[ <string>x ], bb = b[ <string>x ];\n                    if( aa === bb ) return 0;\n                    return aa < bb ? -1 : + 1;\n                } \n                break;\n            case 'function' :\n                if( x.length === 1 ){\n                    this._comparator = ( a, b ) => {\n                        const aa = (<any>x).call( this, a ), bb = (<any>x).call( this, b );\n                        if( aa === bb ) return 0;\n                        return aa < bb ? -1 : + 1;\n                    }\n                }\n                else{\n                    this._comparator = ( a, b ) => (<any>x).call( this, a, b );\n                }\n                break;\n                \n            default :\n                this._comparator = null;\n        }\n    }\n    \n    // TODO: Improve typing\n    getStore() : Transactional {\n        return this._store || ( this._store = this._owner ? this._owner.getStore() : this._defaultStore );\n    }\n\n    _store : Transactional\n\n    get comparator(){ return this._comparator; }\n    _comparator : ( a : R, b : R ) => number\n\n    _onChildrenChange( record : R, options : TransactionOptions = {}, initiator? : Transactional ){\n        // Ignore updates from nested transactions.\n        if( initiator === this ) return;\n\n        const { idAttribute } = this;\n\n        if( record.hasChanged( idAttribute ) ){\n            updateIndex( this._byId, record );\n        }\n\n        const isRoot = begin( this );\n\n        if( markAsDirty( this, options ) ){\n            // Forward change event from the record.\n            trigger2( this, 'change', record, options )\n        }\n\n        isRoot && commit( this );\n    }\n\n    get( objOrId : string | R | Object ) : R {\n        if( objOrId == null ) return;\n\n        if( typeof objOrId === 'object' ){\n            const id = objOrId[ this.idAttribute ];\n            return ( id !== void 0 && this._byId[ id ] ) || this._byId[ (<R>objOrId).cid ];\n        }\n        else{\n            return this._byId[ objOrId ];\n        }        \n    }\n\n    each( iteratee : ( val : R, key : number ) => void, context? : any ){\n        const fun = bindContext( iteratee, context ),\n            { models } = this;\n\n        for( let i = 0; i < models.length; i++ ){\n            fun( models[ i ], i ); \n        }\n    }\n\n    forEach( iteratee : ( val : R, key? : number ) => void, context? : any ){\n        return this.each( iteratee, context );\n    }\n\n    every( iteratee : Predicate<R>, context? : any ) : boolean {\n        const fun = toPredicateFunction( iteratee, context ),\n            { models } = this;\n\n        for( let i = 0; i < models.length; i++ ){\n            if( !fun( models[ i ], i ) ) return false;\n        }\n\n        return true;\n    }\n\n    filter( iteratee : Predicate<R>, context? : any ) : R[] {\n        const fun = toPredicateFunction( iteratee, context ),\n            { models } = this;\n\n        return this.map( ( x, i ) => fun( x, i ) ? x : void 0 );\n    }\n\n    find( iteratee : Predicate<R>, context? : any ) : R {\n        const fun = toPredicateFunction( iteratee, context ),\n        { models } = this;\n\n        for( let i = 0; i < models.length; i++ ){\n            if( fun( models[ i ], i ) ) return models[ i ];\n        }\n\n        return null;\n    }\n\n    some( iteratee : Predicate<R>, context? : any ) : boolean {\n        return Boolean( this.find( iteratee, context ) );\n    }\n\n    map< T >( iteratee : ( val : R, key : number ) => T, context? : any ) : T[]{\n        const fun = bindContext( iteratee, context ),\n            { models } = this,\n            mapped = Array( models.length );\n\n        let j = 0;\n\n        for( let i = 0; i < models.length; i++ ){\n            const x = fun( models[ i ], i );\n            x === void 0 || ( mapped[ j++ ] = x ); \n        }\n\n        mapped.length = j;\n\n        return mapped;\n    }\n\n    _validateNested( errors : {} ) : number {\n        // Don't validate if not aggregated.\n        if( this._shared ) return 0;\n\n        let count = 0;\n\n        this.each( record => {\n            const error = record.validationError;\n            if( error ){\n                errors[ record.cid ] = error;\n                count++;\n            }\n        });\n\n        return count;\n    }\n\n    model : typeof Record\n\n    // idAttribute extracted from the model type.\n    idAttribute : string\n\n    constructor( records? : ( R | {} )[], options : CollectionOptions = {}, shared? : number ){\n        super( _count++ );\n        this.models = [];\n        this._byId = {};\n        \n        this.comparator  = this.comparator;\n\n        if( options.comparator !== void 0 ){\n            this.comparator = options.comparator;\n            options.comparator = void 0;\n        }\n        \n        this.model       = this.model;\n        \n        if( options.model ){\n            this.model = options.model;\n            options.model = void 0;\n        }\n\n        this.idAttribute = this.model.prototype.idAttribute; //TODO: Remove?\n\n        this._shared = shared || 0;\n\n        if( records ){\n            const elements = toElements( this, records, options );\n            emptySetTransaction( this, elements, options, true );\n        }\n\n        this.initialize.apply( this, arguments );\n\n        if( this._localEvents ) this._localEvents.subscribe( this, this );\n    }\n\n    initialize(){}\n\n    get length() : number { return this.models.length; }\n    first() : R { return this.models[ 0 ]; }\n    last() : R { return this.models[ this.models.length - 1 ]; }\n    at( a_index : number ) : R {\n        const index = a_index < 0 ? a_index + this.models.length : a_index;    \n        return this.models[ index ];\n    }\n\n    // Deeply clone collection, optionally setting new owner.\n    clone( options : CloneOptions = {} ) : this {\n        const models = this._shared & ItemsBehavior.share ? this.models : this.map( model => model.clone() ),\n              copy : this = new (<any>this.constructor)( models, { model : this.model, comparator : this.comparator }, this._shared );\n        \n        if( options.pinStore ) copy._defaultStore = this.getStore();\n        \n        return copy;\n    }\n\n    toJSON( options? : object ) : any {\n        return this.models.map( model => model.toJSON( options ) );\n    }\n\n    // Apply bulk in-place object update in scope of ad-hoc transaction \n    set( elements : ElementsArg = [], options : TransactionOptions = {} ) : this {\n        if( (<any>options).add !== void 0 ){\n            this._log( 'warn', \"Collection.set doesn't support 'add' option, behaving as if options.add === true.\", options );\n        }\n\n        // Handle reset option here - no way it will be populated from the top as nested transaction.\n        if( options.reset ){\n            this.reset( elements, options )\n        }\n        else{\n            const transaction = this._createTransaction( elements, options );\n            transaction && transaction.commit();\n        } \n\n        return this;    \n    }\n\n        /**\n     * Enable or disable live updates.\n     * \n     * `true` enables full collection synchronization.\n     * `false` cancel live updates.\n     * `json => true | false` - filter updates\n     */\n    liveUpdates( enabled : LiveUpdatesOption ) : IOPromise<this> {\n        if( enabled ){\n            this.liveUpdates( false );\n\n            const filter = typeof enabled === 'function' ? enabled : () => true;\n\n            this._liveUpdates = {\n                updated : json => {\n                    filter( json ) && this.add( json, { parse : true, merge : true } );\n                },\n\n                removed : id => this.remove( id )\n            };\n\n            return this.getEndpoint().subscribe( this._liveUpdates, this ).then( () => this );\n        }\n        else{\n            if( this._liveUpdates ){\n                this.getEndpoint().unsubscribe( this._liveUpdates, this );\n                this._liveUpdates = null;\n            }\n        }\n    }\n\n    _liveUpdates : object\n\n    fetch( a_options : { liveUpdates? : LiveUpdatesOption } & TransactionOptions = {} ) : IOPromise<this> {\n        const options = { parse : true, ...a_options },\n            endpoint = this.getEndpoint();\n\n        return startIO(\n            this,\n            endpoint.list( options, this ),\n            options,\n\n            json => {\n                let result : any = this.set( json, { parse : true, ...options } as TransactionOptions );\n                \n                if( options.liveUpdates ){\n                    result = this.liveUpdates( options.liveUpdates );\n                }\n\n                return result;\n            }\n        );\n    }\n\n    dispose() : void {\n        if( this._disposed ) return;\n\n        const aggregated = !this._shared;\n\n        for( let record of this.models ){\n            free( this, record );\n\n            if( aggregated ) record.dispose();\n        }\n\n        this.liveUpdates( false );\n\n        super.dispose();\n    }\n\n    reset( a_elements? : ElementsArg, options : TransactionOptions = {} ) : R[] {\n        const isRoot = begin( this ),\n              previousModels = this.models;\n\n        // Make all changes required, but be silent.\n        if( a_elements ){            \n            emptySetTransaction( this, toElements( this, a_elements, options ), options, true );\n        }\n        else{\n            this._byId = {};\n            this.models = [];\n        }\n\n        markAsDirty( this, options );\n\n        options.silent || trigger2( this, 'reset', this, defaults( { previousModels : previousModels }, options ) );\n\n        // Dispose models which are not in the updated collection.\n        const { _byId } = this;\n        \n        for( let toDispose of previousModels ){\n            _byId[ toDispose.cid ] || free( this, toDispose );\n        }\n\n        isRoot && commit( this );\n        return this.models;\n    }\n\n    // Add elements to collection.\n    add( a_elements : ElementsArg , options : AddOptions = {} ){\n        const elements = toElements( this, a_elements, options ),\n              transaction = this.models.length ?\n                    addTransaction( this, elements, options ) :\n                    emptySetTransaction( this, elements, options );\n\n        if( transaction ){\n            transaction.commit();\n            return transaction.added;\n        }\n    }\n\n    // Remove elements. \n    remove( recordsOrIds : any, options : CollectionOptions = {} ) : R[] | R {\n        if( recordsOrIds ){\n            return Array.isArray( recordsOrIds ) ?\n                        removeMany( this, recordsOrIds, options ) as R[]:\n                        removeOne( this, recordsOrIds, options ) as R;\n        }\n\n        return [];\n    }\n\n    // Apply bulk object update without any notifications, and return open transaction.\n    // Used internally to implement two-phase commit.   \n    _createTransaction( a_elements : ElementsArg, options : TransactionOptions = {} ) : CollectionTransaction | void {\n        const elements = toElements( this, a_elements, options );\n\n        if( this.models.length ){\n            return options.remove === false ?\n                        addTransaction( this, elements, options, true ) :\n                        setTransaction( this, elements, options );\n        }\n        else{\n            return emptySetTransaction( this, elements, options );\n        }\n    }\n\n    static _attribute = AggregatedType;\n\n    /***********************************\n     * Collection manipulation methods\n     */\n\n    pluck( key : keyof R ) : any[] {\n        return this.models.map( model => model[ key ] );\n    }\n\n    sort( options : TransactionOptions = {} ) : this {\n        if( sortElements( this, options ) ){\n            const isRoot = begin( this );\n            \n            if( markAsDirty( this, options ) ){\n                trigger2( this, 'sort', this, options );\n            }\n\n            isRoot && commit( this );\n        }\n\n        return this;\n    }\n\n    // Add a model to the end of the collection.\n    push(model : ElementsArg, options : CollectionOptions ) {\n      return this.add(model, assign({at: this.length}, options));\n    }\n\n    // Remove a model from the end of the collection.\n    pop( options : CollectionOptions ) : R {\n      var model = this.at(this.length - 1);\n      this.remove(model, { unset : true, ...options });\n      return model;\n    }\n\n    // Remove and return given model.\n    // TODO: do not dispose the model for aggregated collection.\n    unset( modelOrId : R | string, options? ) : R {\n        const value = this.get( modelOrId );\n        this.remove( modelOrId, { unset : true, ...options } );\n        return value;\n    }\n\n    // Add a model to the beginning of the collection.\n    unshift(model : ElementsArg, options : CollectionOptions ) {\n      return this.add(model, assign({at: 0}, options));\n    }\n\n    // Remove a model from the beginning of the collection.\n    shift( options? : CollectionOptions ) : R {\n      var model = this.at(0);\n      this.remove( model, { unset : true, ...options } );\n      return model;\n    }\n\n    // Slice out a sub-array of models from the collection.\n    slice() : R[] {\n      return slice.apply(this.models, arguments);\n    }\n\n    indexOf( modelOrId : any ) : number {\n        const record = this.get( modelOrId );\n        return this.models.indexOf( record );\n    }\n\n    modelId( attrs : {} ) : any {\n        return attrs[ this.model.prototype.idAttribute ];\n    }\n\n    // Toggle model in collection.\n    toggle( model : R, a_next? : boolean ) : boolean {\n        var prev = Boolean( this.get( model ) ),\n            next = a_next === void 0 ? !prev : Boolean( a_next );\n\n        if( prev !== next ){\n            if( prev ){\n                this.remove( model );\n            }\n            else{\n                this.add( model );\n            }\n        }\n\n        return next;\n    }\n\n    _log( level : tools.LogLevel, text : string, value ) : void {\n        tools.log( level, `[Collection Update] ${ this.model.prototype.getClassName() }.${ this.getClassName() }: ` + text, {\n            Argument : value,\n            'Attributes spec' : this.model.prototype._attributes\n        });\n    }\n\n    getClassName() : string {\n        return super.getClassName() || 'Collection';\n    }\n}\n\nexport type LiveUpdatesOption = boolean | ( ( x : any ) => boolean );\n\nexport type ElementsArg = Object | Record | Object[] | Record[];\n\n// TODO: make is safe for parse to return null (?)\nfunction toElements( collection : Collection, elements : ElementsArg, options : CollectionOptions ) : Elements {\n    const parsed = options.parse ? collection.parse( elements, options ) : elements; \n    return Array.isArray( parsed ) ? parsed : [ parsed ];\n}\n\ncreateSharedTypeSpec( Collection, SharedType );\n\nRecord.Collection = <any>Collection;\n\nfunction bindContext( fun : Function, context? : any ){\n    return context !== void 0 ? ( v, k ) => fun.call( context, v, k ) : fun;\n}\n\nfunction toPredicateFunction<R>( iteratee : Predicate<R>, context : any ){\n    if( typeof iteratee === 'object' ){\n        // Wrap object to the predicate...\n        return x => {\n            for( let key in iteratee as any ){\n                if( iteratee[ key ] !== x[ key ] )\n                    return false;\n            }\n\n            return true;\n        }\n    }\n    \n    return bindContext( iteratee, context );\n\n}","import { Collection } from '../collection'\nimport { Record } from '../record'\nimport { CompiledReference } from '../traversable'\n\nexport type CollectionReference = ( () => Collection ) | Collection | string; \n\n/** @private */\nexport function parseReference( collectionRef : CollectionReference ) : ( root : Record ) => Collection {\n    switch( typeof collectionRef ){\n        case 'function' :\n            return root => (<any>collectionRef).call( root );\n        case 'object'   :\n            return () => <Collection>collectionRef;\n        case 'string'   :\n            const { resolve } = new CompiledReference( <string>collectionRef );\n            return resolve;\n    }\n}","import { AnyType, AttributeOptions } from '../record'\nimport { parseReference, CollectionReference } from './commons'\nimport { Collection } from '../collection'\nimport { Record } from '../record'\n\nimport { ChainableAttributeSpec } from '../record'\n\n/********\n * Reference to model by id.\n * \n * Untyped attribute. Holds model id, when unresolved. When resolved, is substituted\n * with a real model.\n * \n * No model changes are detected and counted as owner's change. That's intentional.\n */\n\n/** @private */\ntype RecordRefValue = Record | string;\n\n/** @private */\nclass RecordRefType extends AnyType {\n    // It is always serialized as an id, whenever it's resolved or not. \n    toJSON( value : RecordRefValue ){\n        return value && typeof value === 'object' ? value.id : value;\n    }\n\n    // Wne \n    clone( value : RecordRefValue ){\n        return value && typeof value === 'object' ? value.id : value;\n    }\n\n    // Model refs by id are equal when their ids are equal.\n    isChanged( a : RecordRefValue, b : RecordRefValue){\n        var aId = a && ( (<Record>a).id == null ? a : (<Record>a).id ),\n            bId = b && ( (<Record>b).id == null ? b : (<Record>b).id );\n\n        return aId !== bId;\n    }\n\n    // Refs are always valid.\n    validate( model, value, name ){}\n}\n\nRecord.from = function from( masterCollection : CollectionReference ) : ChainableAttributeSpec {\n    const getMasterCollection = parseReference( masterCollection );\n\n    const typeSpec = new ChainableAttributeSpec({\n        value : null,\n        _attribute : RecordRefType\n    });\n    \n    return typeSpec\n        .get( function( objOrId : RecordRefValue, name : string ) : Record {\n            if( typeof objOrId === 'object' ) return objOrId;\n\n            // So, we're dealing with an id reference. Resolve it.\n            const collection = getMasterCollection( this );\n            let   record : Record = null;\n\n            // If master collection exists and is not empty...\n            if( collection && collection.length ){\n                // Silently update attribute with record from this collection.\n                record = collection.get( objOrId ) || null;\n                this.attributes[ name ] = record;\n\n                // Subscribe for events manually. delegateEvents won't be invoked.\n                record && this._attributes[ name ].handleChange( record, null, this, {} );\n            }\n\n            return record;\n        });\n};","import { Collection, CollectionOptions } from '../collection'\nimport { tools, eventsApi, define } from '../object-plus'\nimport { Record, AggregatedType } from '../record'\nimport { parseReference, CollectionReference } from './commons'\nimport { ChainableAttributeSpec } from '../record'\nimport { Transactional, ItemsBehavior, TransactionOptions, transactionApi } from '../transactions'\n\nconst { fastDefaults } = tools;\n\ntype RecordsIds = ( string | number )[];\n\nCollection.subsetOf = function subsetOf( masterCollection : CollectionReference ) : ChainableAttributeSpec {\n    const SubsetOf = this._SubsetOf || ( this._SubsetOf = defineSubsetCollection( this ) ),\n        getMasterCollection = parseReference( masterCollection ),\n        typeSpec = new ChainableAttributeSpec({\n            type : SubsetOf\n        });\n\n    return typeSpec.get(\n        function( refs ){\n            !refs || refs.resolvedWith || refs.resolve( getMasterCollection( this ) );\n            return refs;\n        }\n    );\n};\n\nconst subsetOfBehavior = ItemsBehavior.share | ItemsBehavior.persistent;\n\nfunction defineSubsetCollection( CollectionConstructor : typeof Collection ) {\n    @define class SubsetOfCollection extends CollectionConstructor {\n        refs : any[];\n        resolvedWith : Collection = null;\n\n        _attribute : AggregatedType\n\n        get __inner_state__(){ return this.refs || this.models; }\n\n        constructor( recordsOrIds?, options? ){\n            super( [], options, subsetOfBehavior );\n            this.refs = toArray( recordsOrIds );\n        }\n\n        // Remove should work fine as it already accepts ids. Add won't...\n        add( a_elements, options = {} ){\n            const { resolvedWith } = this,\n                    toAdd = toArray( a_elements );\n            \n            if( resolvedWith ){\n                // If the collection is resolved already, everything is simple.\n                return super.add( resolveRefs( resolvedWith, toAdd ), options );\n            }\n            else{\n                // Collection is not resolved yet. So, we prepare the delayed computation.\n                if( toAdd.length ){\n                    const isRoot = transactionApi.begin( this );\n\n                    // Save elements to resolve in future...\n                    this.refs = this.refs ? this.refs.concat( toAdd ) : toAdd.slice();\n\n                    transactionApi.markAsDirty( this, options );\n\n                    // And throw the 'changes' event.\n                    isRoot && transactionApi.commit( this );\n                }\n            }\n        }\n\n        reset( a_elements?, options = {} ){\n            const { resolvedWith } = this,\n                elements = toArray( a_elements );\n    \n            return resolvedWith ?\n                // Collection is resolved, so parse ids and forward the call to set.\n                super.reset( resolveRefs( resolvedWith, elements ), options ) :\n                // Collection is not resolved yet. So, we prepare the delayed computation.\n                delaySet( this, elements, options ) || [];\n        }\n\n        _createTransaction( a_elements, options? ){\n            const { resolvedWith } = this,\n                elements = toArray( a_elements );\n    \n            return resolvedWith ?\n                // Collection is resolved, so parse ids and forward the call to set.\n                super._createTransaction( resolveRefs( resolvedWith, elements ), options ) :\n                // Collection is not resolved yet. So, we prepare the delayed computation.\n                delaySet( this, elements, options );\n        }\n\n        // Serialized as an array of model ids.\n        toJSON() : RecordsIds {\n            return this.refs ?\n                this.refs.map( objOrId => objOrId.id || objOrId ) :\n                this.models.map( model => model.id );\n        }\n\n        // Subset is always valid.\n        _validateNested(){ return 0; }\n\n        get length() : number {\n            return this.models.length || ( this.refs ? this.refs.length : 0 );\n        }\n\n        // Must be shallow copied on clone.\n        clone( owner? ){\n            var Ctor = (<any>this).constructor,\n                copy = new Ctor( [], {\n                    model : this.model,\n                    comparator : this.comparator\n                });\n\n            if( this.resolvedWith ){\n                // TODO: bug here. \n                copy.resolvedWith = this.resolvedWith;\n                copy.refs = null;\n                copy.reset( this.models, { silent : true } );\n            }\n            else{\n                copy.refs = this.refs.slice();\n            }\n\n            return copy;\n        }\n\n        // Clean up the custom parse method possibly defined in the base class.\n        parse( raw : any ) : Record[] {\n            return raw;\n        }\n\n        resolve( collection : Collection ) : this {\n            if( collection && collection.length ){\n                this.resolvedWith = collection;\n\n                if( this.refs ){\n                    this.reset( this.refs, { silent : true } );\n                    this.refs = null;\n                }\n            }\n\n            return this;\n        }\n\n        getModelIds() : RecordsIds { return this.toJSON(); }\n\n        toggle( modelOrId : any, val : boolean ) : boolean {\n            return super.toggle( this.resolvedWith.get( modelOrId ), val );\n        }\n\n        addAll() : Record[] {\n            if( this.resolvedWith ){\n                this.set( this.resolvedWith.models );\n                return this.models;\n            }\n\n            throw new Error( \"Cannot add elemens because the subset collection is not resolved yet.\" );\n        }\n\n        toggleAll() : Record[] {\n            return this.length ? this.reset() : this.addAll();\n        }\n    }\n\n    // Clean up all custom item events to prevent memory leaks.\n    SubsetOfCollection.prototype._itemEvents = void 0;\n\n    return SubsetOfCollection;\n}\n\nfunction resolveRefs( master, elements ){\n    const records = [];\n    \n    for( let el of elements ){\n        const record = master.get( el );\n        if( record ) records.push( record );\n    }\n\n    return records;\n}\n\nfunction delaySet( collection, elements, options ) : void {\n    if( tools.notEqual( collection.refs, elements ) ){\n        const isRoot = transactionApi.begin( collection );\n\n        // Save elements to resolve in future...\n        collection.refs = elements.slice();\n\n        transactionApi.markAsDirty( collection, options );\n        \n        // And throw the 'changes' event.\n        isRoot && transactionApi.commit( collection );\n    }\n}\n\nfunction toArray( elements ){\n    return elements ? ( \n        Array.isArray( elements ) ? elements : [ elements ]\n    ) : [];\n}","import { Record } from '../record'\nimport { Transactional } from '../transactions'\nimport { startIO, IOPromise } from '../io-tools'\n\nlet _store : Store = null;\n\nexport class Store extends Record {\n    getStore() : Store { return this; }\n \n    // delegate item lookup to owner, and to the global store if undefined\n    get( name : string ) : any {\n        // Lookup for resource in the current store. \n        let local = this[ name ];\n\n        // If something is found or it's the global store, return result.\n        if( local || this === this._defaultStore ) return local;\n\n        // Forward failed lookup to owner or global store.\n        return this._owner ? this._owner.get( name ) : this._defaultStore.get( name ); \n    }\n\n    static get global(){ return _store; }\n    static set global( store : Store ){\n        if( _store ){\n          _store.dispose();\n        }\n\n        Transactional.prototype._defaultStore = _store = store;\n    }\n}\n\nStore.global = new Store();","// Polyfill for IE10. Should fix problems with babel and statics inheritance.\nimport { tools } from './object-plus'\n\ndeclare global {\n    interface ObjectConstructor {\n        setPrototypeOf( target : Object, proto : Object );\n    }\n}\n\nObject.setPrototypeOf || ( Object.setPrototypeOf = tools.defaults );\n\n/**\n * Export everything \n */\n\nexport * from './object-plus'\nexport * from './collection'\nexport * from './relations'\nexport * from './record'\nexport * from './transactions'\n\nexport * from './io-tools'\n\n// Exported module itself is the global event bus.\nimport { Events } from './object-plus/'\nexport const { on, off, trigger, once, listenTo, stopListening, listenToOnce } = <any>Events;\n\nimport { Collection } from './collection'\n\n// Define synonims for NestedTypes backward compatibility.\nimport { Record as Model } from './record' \nimport { define, Mixable as Class } from './object-plus/'\nexport { Model, Class };\n\nexport function attributes( attrDefs ) : typeof Model {\n    @define class DefaultRecord extends Model {\n        static attributes = attrDefs;\n    }\n\n    return DefaultRecord;\n}\n\nimport { ChainableAttributeSpec } from './record'\n\n/** Typeless attribute declaration with default value. */ \nexport function value( x : any ) : ChainableAttributeSpec {\n    return new ChainableAttributeSpec({ value : x });\n}\n\n/** Wrap model or collection method in transaction. */\nexport function transaction< F extends Function >( method : F ) : F {\n    return <any>function( ...args ){\n        let result;\n        \n        this.transaction( () => {\n            result = method.apply( this, args );\n        });\n        \n        return result;\n    }\n}"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__rest","e","indexOf","getOwnPropertySymbols","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","defaults","dest","source","name","other","levelToNumber","none","error","warn","info","log","debug","a_level","a_msg","a_props","msg","props","level","levelAsNumber","throw","logger","Error","stop","process","env","NODE_ENV","toString","window","something","value","__inner_state__","isArray","Boolean","keys_1","keys","join","body","x","isValidJSON","proto","getPrototypeOf","every","getBaseClass","Class","isEmpty","obj","some","fun","ArrayProto","arr","result","someArray","someObject","predicate","omit","discard","transform","once","func","memo","first","console","args","name_1","push","DateProto","Date","ObjectProto","notEqual","a","protoA","arraysNotEqual","keysA","objectsNotEqual","HashProto","hashMap","hash","definition","_i","names","names_1","_a","name_2","prop","o","Mixable","protoProps","staticProps","BaseClass","mixins","defineMixin","merge","mergeObject","getStaticDefinitions","onDefine","definitions","mergeInheritedMembers","spec","statics","TheSubclass","tslib_1.__extends","predefine","define","Constructor","__super__","MixinsState","get","populate","onExtend","ClassOrDefinition","Ctor","rules","definitionRules","definitionDecorator","definitionKey","mergeRules","appliedMixins","rule","slice","mixins_1","mixin","sourceMixins","concat","ctors","ctors_1","unshift","object","ignore","dontMix","forEachOwnProp","sourceProp","_this","assignProperty","mixinRules","protoValue","baseProto","resolveRule","function","caller","list","destProp","configurable","pipe","classFirst","classLast","map","EventMap","handlers","addEventsMap","addEvent","split","eventSplitter","getBubblingHandler","callback","EventDescriptor","event_1","on","event_2","off","handler","_bubblingHandlers","event","trigger5","trigger3","trigger2","context","next","listOff","_events","filteredHead","prev","head","ev","_callback","listSend3","EventHandler","once_1","_once","name_3","strings","api","events","test","self","queue","all","listSend2","listSend4","listSend5","f","listSend6","_idCount","uniqueId","cid","initialize","Messenger","localEvents","_localEvents","properties","eventsMap","defineProperties","toPropertyDescriptor","addReference","a_source","_listeningTo","removeAll","second","_disposed","stopListening","Events","listener","extend","tools.assign","tools.log","_validateNested","nested","validate","ValidationError","iteratee","each","eachError","referenceMask","reference","splitTail","path","match","substr","tail","pop","local","resolve","Function","shift","resolveReference","root","action","skip","getStore","getOwner","startIO","promise","options","thenDo","abortIO","ioUpdate","_ioPromise","then","resp","triggerAndBubble","catch","err","abort","eventSource","trigger","collection","ItemsBehavior","cidPrefix","Transactional","endpoint","_endpoint","Transactional_1","_owner","_ownerKey","_changeEventName","listenTo","isRoot","transactionApi","begin","update","set","commit","values","transaction","_createTransaction","_changeToken","data","_defaultStore","v","k","val","getOwnerEndpoint","_endpoints","_validationError","validationError","getValidationError","_transaction","markAsDirty","dirty","silent","_isDirty","initiator","originalOptions","_onChildrenChange","aquire","owner","child","free","_begin","_markAsDirty","setAttribute","record","_attributes","doUpdate","attributes","_previousAttributes","AttributesCopy","_changedAttributes","UpdateRecordMixin","attribute","propagateChanges","forceAttributeChange","a_values","unknown","changes","parse","shouldBeAnObject","RecordTransaction","nested_1","constructorsMixin","attrDefs","attrs","attr","Attributes","_log","nested_2","changes_1","_b","emptyOptions","a_options","getHooks","transforms","changeHandlers","type","toJSON","changeEvents","hasCustomDefault","defaultValue","tools.isValidJSON","JSON","stringify","isRequired","convert","getHook_1","getHook","reduce","chainGetHooks","validate_1","chainTransforms","handleChange","chainChangeHandlers","doInit","AnyType","_attribute","model","isChanged","text","getClassName","Record","Attribute definition","Prev. value","New value","prevHook","nextHook","prevTransform","nextTransform","prevHandler","nextHandler","AggregatedType","clone","canBeUpdated","nestedTransaction","_shared","persistent","_handleChange","unset","dispose","ChainableAttributeSpec","check","metadata","asProp","ref","_onChange","emptyFunction","changed","eventMap","unsubscribe","subscribe","cloned","attrSpec","has","type_1","Number","String","inferType","shared","_isRequired","_has","DateType","date","timestamp","getTime","toISOString","msDatePattern","MSDateType","msDate","exec","TimestampType","supportsDate","isNaN","microsoft","struct","minutesOffset","isoDatePattern","numericKeys","undefined","UTC","safeParseDate","ImmutableClassType","PrimitiveType","NumericType","num","isFinite","Integer","Math","round","integer","ArrayType","ObjectType","doNothing","FunctionType","shareAndListen","listen","share","SharedType","implicitObject","attributesDefinition","baseClassAttributes","myAttributes","_.transform","createAttribute","allAttributes","_.defaults","ConstructorsMixin","_attributesArray","createPropertyDescriptor","attrSpecs","eventsApi.EventMap","createWatcherFromRef","wrapWatcher","localEventsMixin","attrDef","from","createSharedTypeSpec","Attribute","watcher","IORecordMixin","save","getEndpoint","json","isNew","id","fetch","read","destroy","remove","_cidCounter","_super","typeCheck","diff","hasChanged","old","nullify","forEachAttr","idAttribute","_attributesArray_1","copy","pinStore","errors","asJson","l","newModel","clear","Attributes definition:","Collection","BaseRecordAttributes","BaseRecordAttributesCopy","IdAttribute","DefaultCollection","dynamicMixin","_aquire","_free","convertAndAquire","_aggregationError","_itemEvents","sortElements","_comparator","sort","models","addIndex","index","removeIndex","updateIndex","previous","added","removed","sorted","CollectionTransaction","logAggregationError","added_1","_d","removed_1","_e","addTransaction","items","a_items","forceMerge","_byId","prevLength","a_items_1","item","appendElements","needSort","at","length_1","j","moveElements","sortOrMoveElements","silentOptions","emptySetTransaction","len","src","_reallocateEmpty","setTransaction","_prevById","prevModels","toAdd","orderKept","_reallocate","reusedCount","previous_1","_garbageCollect","children","children_1","freeAll","addedOrChanged","removeMany","toRemove","_removeFromIndex","begin$4","_count","CollectionRefsType","records","comparator","toElements","subset","subsetOf","RefsCollection","_SubsetOf","Refs","Subset","itemEvents","aa","bb","_store","objOrId","bindContext","toPredicateFunction","find","mapped","count","a_index","elements","add","reset","enabled","liveUpdates","filter_1","_liveUpdates","updated","tslib_1.__assign","aggregated","a_elements","previousModels","previousModels_1","toDispose","recordsOrIds","el","splice","notify","removeOne","modelOrId","a_next","Argument","Attributes spec","parsed","parseReference","collectionRef","RecordRefType","masterCollection","getMasterCollection","SubsetOf","subsetOfBehavior","refs","toArray","SubsetOfCollection","resolvedWith","resolveRefs","delaySet","raw","toggle","addAll","master","elements_1","tools.notEqual","Store","store","global","tools.defaults","listenToOnce","DefaultRecord","Model","method","listName","attrName","getMetadata","reject","onAbort","fn","Promise","a_resolve","a_reject"],"mappings":"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"}